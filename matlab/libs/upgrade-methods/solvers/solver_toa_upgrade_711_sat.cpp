#include <Eigen/Dense>
#include "mex.h"

using namespace Eigen;

MatrixXcd solver_toa_upgrade_sat_711(const VectorXd &data)
{
	// Compute coefficients
	const double *d = data.data();
	VectorXd coeffs(36);
	coeffs[0] = 2 * d[10] * d[11] * d[15] * d[27] - 2 * std::pow(d[14], 2) * d[15] * d[27] - 2 * d[11] * d[12] * d[16] * d[27] + 2 * d[13] * d[14] * d[16] * d[27] - 2 * d[10] * d[13] * d[17] * d[27] + 2 * d[12] * d[14] * d[17] * d[27] - 2 * d[11] * d[12] * d[15] * d[28] + 2 * d[13] * d[14] * d[15] * d[28] + 2 * d[9] * d[11] * d[16] * d[28] - 2 * std::pow(d[13], 2) * d[16] * d[28] + 2 * d[12] * d[13] * d[17] * d[28] - 2 * d[9] * d[14] * d[17] * d[28] - 2 * d[10] * d[13] * d[15] * d[29] + 2 * d[12] * d[14] * d[15] * d[29] + 2 * d[12] * d[13] * d[16] * d[29] - 2 * d[9] * d[14] * d[16] * d[29] + 2 * d[9] * d[10] * d[17] * d[29] - 2 * std::pow(d[12], 2) * d[17] * d[29] - d[9] * d[10] * d[11] * d[30] + d[11] * std::pow(d[12], 2) * d[30] + d[10] * std::pow(d[13], 2) * d[30] - 2 * d[12] * d[13] * d[14] * d[30] + d[9] * std::pow(d[14], 2) * d[30];
	coeffs[1] = 2 * d[11] * d[15] * d[19] * d[27] - 2 * d[13] * d[17] * d[19] * d[27] + 2 * d[10] * d[15] * d[20] * d[27] - 2 * d[12] * d[16] * d[20] * d[27] - 2 * d[11] * d[16] * d[21] * d[27] + 2 * d[14] * d[17] * d[21] * d[27] + 2 * d[14] * d[16] * d[22] * d[27] - 2 * d[10] * d[17] * d[22] * d[27] - 4 * d[14] * d[15] * d[23] * d[27] + 2 * d[13] * d[16] * d[23] * d[27] + 2 * d[12] * d[17] * d[23] * d[27] + 2 * d[10] * d[11] * d[24] * d[27] - 2 * std::pow(d[14], 2) * d[24] * d[27] - 2 * d[11] * d[12] * d[25] * d[27] + 2 * d[13] * d[14] * d[25] * d[27] - 2 * d[10] * d[13] * d[26] * d[27] + 2 * d[12] * d[14] * d[26] * d[27] + 2 * d[11] * d[16] * d[18] * d[28] - 2 * d[14] * d[17] * d[18] * d[28] - 2 * d[12] * d[15] * d[20] * d[28] + 2 * d[9] * d[16] * d[20] * d[28] - 2 * d[11] * d[15] * d[21] * d[28] + 2 * d[13] * d[17] * d[21] * d[28] + 2 * d[14] * d[15] * d[22] * d[28] - 4 * d[13] * d[16] * d[22] * d[28] + 2 * d[12] * d[17] * d[22] * d[28] + 2 * d[13] * d[15] * d[23] * d[28] - 2 * d[9] * d[17] * d[23] * d[28] - 2 * d[11] * d[12] * d[24] * d[28] + 2 * d[13] * d[14] * d[24] * d[28] + 2 * d[9] * d[11] * d[25] * d[28] - 2 * std::pow(d[13], 2) * d[25] * d[28] + 2 * d[12] * d[13] * d[26] * d[28] - 2 * d[9] * d[14] * d[26] * d[28] - 2 * d[14] * d[16] * d[18] * d[29] + 2 * d[10] * d[17] * d[18] * d[29] - 2 * d[13] * d[15] * d[19] * d[29] + 2 * d[9] * d[17] * d[19] * d[29] + 2 * d[14] * d[15] * d[21] * d[29] + 2 * d[13] * d[16] * d[21] * d[29] - 4 * d[12] * d[17] * d[21] * d[29] - 2 * d[10] * d[15] * d[22] * d[29] + 2 * d[12] * d[16] * d[22] * d[29] + 2 * d[12] * d[15] * d[23] * d[29] - 2 * d[9] * d[16] * d[23] * d[29] - 2 * d[10] * d[13] * d[24] * d[29] + 2 * d[12] * d[14] * d[24] * d[29] + 2 * d[12] * d[13] * d[25] * d[29] - 2 * d[9] * d[14] * d[25] * d[29] + 2 * d[9] * d[10] * d[26] * d[29] - 2 * std::pow(d[12], 2) * d[26] * d[29] - d[10] * d[11] * d[18] * d[30] + std::pow(d[14], 2) * d[18] * d[30] - d[9] * d[11] * d[19] * d[30] + std::pow(d[13], 2) * d[19] * d[30] - d[9] * d[10] * d[20] * d[30] + std::pow(d[12], 2) * d[20] * d[30] + 2 * d[11] * d[12] * d[21] * d[30] - 2 * d[13] * d[14] * d[21] * d[30] + 2 * d[10] * d[13] * d[22] * d[30] - 2 * d[12] * d[14] * d[22] * d[30] - 2 * d[12] * d[13] * d[23] * d[30] + 2 * d[9] * d[14] * d[23] * d[30];
	coeffs[2] = 2 * d[15] * d[19] * d[20] * d[27] - 2 * d[16] * d[20] * d[21] * d[27] - 2 * d[17] * d[19] * d[22] * d[27] + 2 * d[17] * d[21] * d[23] * d[27] + 2 * d[16] * d[22] * d[23] * d[27] - 2 * d[15] * std::pow(d[23], 2) * d[27] + 2 * d[11] * d[19] * d[24] * d[27] + 2 * d[10] * d[20] * d[24] * d[27] - 4 * d[14] * d[23] * d[24] * d[27] - 2 * d[12] * d[20] * d[25] * d[27] - 2 * d[11] * d[21] * d[25] * d[27] + 2 * d[14] * d[22] * d[25] * d[27] + 2 * d[13] * d[23] * d[25] * d[27] - 2 * d[13] * d[19] * d[26] * d[27] + 2 * d[14] * d[21] * d[26] * d[27] - 2 * d[10] * d[22] * d[26] * d[27] + 2 * d[12] * d[23] * d[26] * d[27] + 2 * d[16] * d[18] * d[20] * d[28] - 2 * d[15] * d[20] * d[21] * d[28] + 2 * d[17] * d[21] * d[22] * d[28] - 2 * d[16] * std::pow(d[22], 2) * d[28] - 2 * d[17] * d[18] * d[23] * d[28] + 2 * d[15] * d[22] * d[23] * d[28] - 2 * d[12] * d[20] * d[24] * d[28] - 2 * d[11] * d[21] * d[24] * d[28] + 2 * d[14] * d[22] * d[24] * d[28] + 2 * d[13] * d[23] * d[24] * d[28] + 2 * d[11] * d[18] * d[25] * d[28] + 2 * d[9] * d[20] * d[25] * d[28] - 4 * d[13] * d[22] * d[25] * d[28] - 2 * d[14] * d[18] * d[26] * d[28] + 2 * d[13] * d[21] * d[26] * d[28] + 2 * d[12] * d[22] * d[26] * d[28] - 2 * d[9] * d[23] * d[26] * d[28] + 2 * d[17] * d[18] * d[19] * d[29] - 2 * d[17] * std::pow(d[21], 2) * d[29] - 2 * d[15] * d[19] * d[22] * d[29] + 2 * d[16] * d[21] * d[22] * d[29] - 2 * d[16] * d[18] * d[23] * d[29] + 2 * d[15] * d[21] * d[23] * d[29] - 2 * d[13] * d[19] * d[24] * d[29] + 2 * d[14] * d[21] * d[24] * d[29] - 2 * d[10] * d[22] * d[24] * d[29] + 2 * d[12] * d[23] * d[24] * d[29] - 2 * d[14] * d[18] * d[25] * d[29] + 2 * d[13] * d[21] * d[25] * d[29] + 2 * d[12] * d[22] * d[25] * d[29] - 2 * d[9] * d[23] * d[25] * d[29] + 2 * d[10] * d[18] * d[26] * d[29] + 2 * d[9] * d[19] * d[26] * d[29] - 4 * d[12] * d[21] * d[26] * d[29] - d[11] * d[18] * d[19] * d[30] - d[10] * d[18] * d[20] * d[30] - d[9] * d[19] * d[20] * d[30] + 2 * d[12] * d[20] * d[21] * d[30] + d[11] * std::pow(d[21], 2) * d[30] + 2 * d[13] * d[19] * d[22] * d[30] - 2 * d[14] * d[21] * d[22] * d[30] + d[10] * std::pow(d[22], 2) * d[30] + 2 * d[14] * d[18] * d[23] * d[30] - 2 * d[13] * d[21] * d[23] * d[30] - 2 * d[12] * d[22] * d[23] * d[30] + d[9] * std::pow(d[23], 2) * d[30];
	coeffs[3] = 2 * d[19] * d[20] * d[24] * d[27] - 2 * std::pow(d[23], 2) * d[24] * d[27] - 2 * d[20] * d[21] * d[25] * d[27] + 2 * d[22] * d[23] * d[25] * d[27] - 2 * d[19] * d[22] * d[26] * d[27] + 2 * d[21] * d[23] * d[26] * d[27] - 2 * d[20] * d[21] * d[24] * d[28] + 2 * d[22] * d[23] * d[24] * d[28] + 2 * d[18] * d[20] * d[25] * d[28] - 2 * std::pow(d[22], 2) * d[25] * d[28] + 2 * d[21] * d[22] * d[26] * d[28] - 2 * d[18] * d[23] * d[26] * d[28] - 2 * d[19] * d[22] * d[24] * d[29] + 2 * d[21] * d[23] * d[24] * d[29] + 2 * d[21] * d[22] * d[25] * d[29] - 2 * d[18] * d[23] * d[25] * d[29] + 2 * d[18] * d[19] * d[26] * d[29] - 2 * std::pow(d[21], 2) * d[26] * d[29] - d[18] * d[19] * d[20] * d[30] + d[20] * std::pow(d[21], 2) * d[30] + d[19] * std::pow(d[22], 2) * d[30] - 2 * d[21] * d[22] * d[23] * d[30] + d[18] * std::pow(d[23], 2) * d[30];
	coeffs[4] = 2 * d[6] * d[10] * d[11] * d[27] - 2 * d[7] * d[11] * d[12] * d[27] - 2 * d[8] * d[10] * d[13] * d[27] + 2 * d[8] * d[12] * d[14] * d[27] + 2 * d[7] * d[13] * d[14] * d[27] - 2 * d[6] * std::pow(d[14], 2) * d[27] + 2 * d[2] * d[10] * d[15] * d[27] + 2 * d[1] * d[11] * d[15] * d[27] - 4 * d[5] * d[14] * d[15] * d[27] - 2 * d[3] * d[11] * d[16] * d[27] - 2 * d[2] * d[12] * d[16] * d[27] + 2 * d[5] * d[13] * d[16] * d[27] + 2 * d[4] * d[14] * d[16] * d[27] - 2 * d[4] * d[10] * d[17] * d[27] + 2 * d[5] * d[12] * d[17] * d[27] - 2 * d[1] * d[13] * d[17] * d[27] + 2 * d[3] * d[14] * d[17] * d[27] + d[10] * d[11] * std::pow(d[27], 2) - std::pow(d[14], 2) * std::pow(d[27], 2) + 2 * d[7] * d[9] * d[11] * d[28] - 2 * d[6] * d[11] * d[12] * d[28] + 2 * d[8] * d[12] * d[13] * d[28] - 2 * d[7] * std::pow(d[13], 2) * d[28] - 2 * d[8] * d[9] * d[14] * d[28] + 2 * d[6] * d[13] * d[14] * d[28] - 2 * d[3] * d[11] * d[15] * d[28] - 2 * d[2] * d[12] * d[15] * d[28] + 2 * d[5] * d[13] * d[15] * d[28] + 2 * d[4] * d[14] * d[15] * d[28] + 2 * d[2] * d[9] * d[16] * d[28] + 2 * d[0] * d[11] * d[16] * d[28] - 4 * d[4] * d[13] * d[16] * d[28] - 2 * d[5] * d[9] * d[17] * d[28] + 2 * d[4] * d[12] * d[17] * d[28] + 2 * d[3] * d[13] * d[17] * d[28] - 2 * d[0] * d[14] * d[17] * d[28] - 2 * d[11] * d[12] * d[27] * d[28] + 2 * d[13] * d[14] * d[27] * d[28] + d[9] * d[11] * std::pow(d[28], 2) - std::pow(d[13], 2) * std::pow(d[28], 2) + 2 * d[8] * d[9] * d[10] * d[29] - 2 * d[8] * std::pow(d[12], 2) * d[29] - 2 * d[6] * d[10] * d[13] * d[29] + 2 * d[7] * d[12] * d[13] * d[29] - 2 * d[7] * d[9] * d[14] * d[29] + 2 * d[6] * d[12] * d[14] * d[29] - 2 * d[4] * d[10] * d[15] * d[29] + 2 * d[5] * d[12] * d[15] * d[29] - 2 * d[1] * d[13] * d[15] * d[29] + 2 * d[3] * d[14] * d[15] * d[29] - 2 * d[5] * d[9] * d[16] * d[29] + 2 * d[4] * d[12] * d[16] * d[29] + 2 * d[3] * d[13] * d[16] * d[29] - 2 * d[0] * d[14] * d[16] * d[29] + 2 * d[1] * d[9] * d[17] * d[29] + 2 * d[0] * d[10] * d[17] * d[29] - 4 * d[3] * d[12] * d[17] * d[29] - 2 * d[10] * d[13] * d[27] * d[29] + 2 * d[12] * d[14] * d[27] * d[29] + 2 * d[12] * d[13] * d[28] * d[29] - 2 * d[9] * d[14] * d[28] * d[29] + d[9] * d[10] * std::pow(d[29], 2) - std::pow(d[12], 2) * std::pow(d[29], 2) - d[2] * d[9] * d[10] * d[30] - d[1] * d[9] * d[11] * d[30] - d[0] * d[10] * d[11] * d[30] + 2 * d[3] * d[11] * d[12] * d[30] + d[2] * std::pow(d[12], 2) * d[30] + 2 * d[4] * d[10] * d[13] * d[30] - 2 * d[5] * d[12] * d[13] * d[30] + d[1] * std::pow(d[13], 2) * d[30] + 2 * d[5] * d[9] * d[14] * d[30] - 2 * d[4] * d[12] * d[14] * d[30] - 2 * d[3] * d[13] * d[14] * d[30] + d[0] * std::pow(d[14], 2) * d[30];
	coeffs[5] = 2 * d[6] * d[11] * d[19] * d[27] - 2 * d[8] * d[13] * d[19] * d[27] + 2 * d[2] * d[15] * d[19] * d[27] - 2 * d[4] * d[17] * d[19] * d[27] + 2 * d[6] * d[10] * d[20] * d[27] - 2 * d[7] * d[12] * d[20] * d[27] + 2 * d[1] * d[15] * d[20] * d[27] - 2 * d[3] * d[16] * d[20] * d[27] - 2 * d[7] * d[11] * d[21] * d[27] + 2 * d[8] * d[14] * d[21] * d[27] - 2 * d[2] * d[16] * d[21] * d[27] + 2 * d[5] * d[17] * d[21] * d[27] - 2 * d[8] * d[10] * d[22] * d[27] + 2 * d[7] * d[14] * d[22] * d[27] + 2 * d[5] * d[16] * d[22] * d[27] - 2 * d[1] * d[17] * d[22] * d[27] + 2 * d[8] * d[12] * d[23] * d[27] + 2 * d[7] * d[13] * d[23] * d[27] - 4 * d[6] * d[14] * d[23] * d[27] - 4 * d[5] * d[15] * d[23] * d[27] + 2 * d[4] * d[16] * d[23] * d[27] + 2 * d[3] * d[17] * d[23] * d[27] + 2 * d[2] * d[10] * d[24] * d[27] + 2 * d[1] * d[11] * d[24] * d[27] - 4 * d[5] * d[14] * d[24] * d[27] - 2 * d[3] * d[11] * d[25] * d[27] - 2 * d[2] * d[12] * d[25] * d[27] + 2 * d[5] * d[13] * d[25] * d[27] + 2 * d[4] * d[14] * d[25] * d[27] - 2 * d[4] * d[10] * d[26] * d[27] + 2 * d[5] * d[12] * d[26] * d[27] - 2 * d[1] * d[13] * d[26] * d[27] + 2 * d[3] * d[14] * d[26] * d[27] + d[11] * d[19] * std::pow(d[27], 2) + d[10] * d[20] * std::pow(d[27], 2) - 2 * d[14] * d[23] * std::pow(d[27], 2) + 2 * d[7] * d[11] * d[18] * d[28] - 2 * d[8] * d[14] * d[18] * d[28] + 2 * d[2] * d[16] * d[18] * d[28] - 2 * d[5] * d[17] * d[18] * d[28] + 2 * d[7] * d[9] * d[20] * d[28] - 2 * d[6] * d[12] * d[20] * d[28] - 2 * d[3] * d[15] * d[20] * d[28] + 2 * d[0] * d[16] * d[20] * d[28] - 2 * d[6] * d[11] * d[21] * d[28] + 2 * d[8] * d[13] * d[21] * d[28] - 2 * d[2] * d[15] * d[21] * d[28] + 2 * d[4] * d[17] * d[21] * d[28] + 2 * d[8] * d[12] * d[22] * d[28] - 4 * d[7] * d[13] * d[22] * d[28] + 2 * d[6] * d[14] * d[22] * d[28] + 2 * d[5] * d[15] * d[22] * d[28] - 4 * d[4] * d[16] * d[22] * d[28] + 2 * d[3] * d[17] * d[22] * d[28] - 2 * d[8] * d[9] * d[23] * d[28] + 2 * d[6] * d[13] * d[23] * d[28] + 2 * d[4] * d[15] * d[23] * d[28] - 2 * d[0] * d[17] * d[23] * d[28] - 2 * d[3] * d[11] * d[24] * d[28] - 2 * d[2] * d[12] * d[24] * d[28] + 2 * d[5] * d[13] * d[24] * d[28] + 2 * d[4] * d[14] * d[24] * d[28] + 2 * d[2] * d[9] * d[25] * d[28] + 2 * d[0] * d[11] * d[25] * d[28] - 4 * d[4] * d[13] * d[25] * d[28] - 2 * d[5] * d[9] * d[26] * d[28] + 2 * d[4] * d[12] * d[26] * d[28] + 2 * d[3] * d[13] * d[26] * d[28] - 2 * d[0] * d[14] * d[26] * d[28] - 2 * d[12] * d[20] * d[27] * d[28] - 2 * d[11] * d[21] * d[27] * d[28] + 2 * d[14] * d[22] * d[27] * d[28] + 2 * d[13] * d[23] * d[27] * d[28] + d[11] * d[18] * std::pow(d[28], 2) + d[9] * d[20] * std::pow(d[28], 2) - 2 * d[13] * d[22] * std::pow(d[28], 2) + 2 * d[8] * d[10] * d[18] * d[29] - 2 * d[7] * d[14] * d[18] * d[29] - 2 * d[5] * d[16] * d[18] * d[29] + 2 * d[1] * d[17] * d[18] * d[29] + 2 * d[8] * d[9] * d[19] * d[29] - 2 * d[6] * d[13] * d[19] * d[29] - 2 * d[4] * d[15] * d[19] * d[29] + 2 * d[0] * d[17] * d[19] * d[29] - 4 * d[8] * d[12] * d[21] * d[29] + 2 * d[7] * d[13] * d[21] * d[29] + 2 * d[6] * d[14] * d[21] * d[29] + 2 * d[5] * d[15] * d[21] * d[29] + 2 * d[4] * d[16] * d[21] * d[29] - 4 * d[3] * d[17] * d[21] * d[29] - 2 * d[6] * d[10] * d[22] * d[29] + 2 * d[7] * d[12] * d[22] * d[29] - 2 * d[1] * d[15] * d[22] * d[29] + 2 * d[3] * d[16] * d[22] * d[29] - 2 * d[7] * d[9] * d[23] * d[29] + 2 * d[6] * d[12] * d[23] * d[29] + 2 * d[3] * d[15] * d[23] * d[29] - 2 * d[0] * d[16] * d[23] * d[29] - 2 * d[4] * d[10] * d[24] * d[29] + 2 * d[5] * d[12] * d[24] * d[29] - 2 * d[1] * d[13] * d[24] * d[29] + 2 * d[3] * d[14] * d[24] * d[29] - 2 * d[5] * d[9] * d[25] * d[29] + 2 * d[4] * d[12] * d[25] * d[29] + 2 * d[3] * d[13] * d[25] * d[29] - 2 * d[0] * d[14] * d[25] * d[29] + 2 * d[1] * d[9] * d[26] * d[29] + 2 * d[0] * d[10] * d[26] * d[29] - 4 * d[3] * d[12] * d[26] * d[29] - 2 * d[13] * d[19] * d[27] * d[29] + 2 * d[14] * d[21] * d[27] * d[29] - 2 * d[10] * d[22] * d[27] * d[29] + 2 * d[12] * d[23] * d[27] * d[29] - 2 * d[14] * d[18] * d[28] * d[29] + 2 * d[13] * d[21] * d[28] * d[29] + 2 * d[12] * d[22] * d[28] * d[29] - 2 * d[9] * d[23] * d[28] * d[29] + d[10] * d[18] * std::pow(d[29], 2) + d[9] * d[19] * std::pow(d[29], 2) - 2 * d[12] * d[21] * std::pow(d[29], 2) - d[2] * d[10] * d[18] * d[30] - d[1] * d[11] * d[18] * d[30] + 2 * d[5] * d[14] * d[18] * d[30] - d[2] * d[9] * d[19] * d[30] - d[0] * d[11] * d[19] * d[30] + 2 * d[4] * d[13] * d[19] * d[30] - d[1] * d[9] * d[20] * d[30] - d[0] * d[10] * d[20] * d[30] + 2 * d[3] * d[12] * d[20] * d[30] + 2 * d[3] * d[11] * d[21] * d[30] + 2 * d[2] * d[12] * d[21] * d[30] - 2 * d[5] * d[13] * d[21] * d[30] - 2 * d[4] * d[14] * d[21] * d[30] + 2 * d[4] * d[10] * d[22] * d[30] - 2 * d[5] * d[12] * d[22] * d[30] + 2 * d[1] * d[13] * d[22] * d[30] - 2 * d[3] * d[14] * d[22] * d[30] + 2 * d[5] * d[9] * d[23] * d[30] - 2 * d[4] * d[12] * d[23] * d[30] - 2 * d[3] * d[13] * d[23] * d[30] + 2 * d[0] * d[14] * d[23] * d[30];
	coeffs[6] = 2 * d[6] * d[19] * d[20] * d[27] - 2 * d[7] * d[20] * d[21] * d[27] - 2 * d[8] * d[19] * d[22] * d[27] + 2 * d[8] * d[21] * d[23] * d[27] + 2 * d[7] * d[22] * d[23] * d[27] - 2 * d[6] * std::pow(d[23], 2) * d[27] + 2 * d[2] * d[19] * d[24] * d[27] + 2 * d[1] * d[20] * d[24] * d[27] - 4 * d[5] * d[23] * d[24] * d[27] - 2 * d[3] * d[20] * d[25] * d[27] - 2 * d[2] * d[21] * d[25] * d[27] + 2 * d[5] * d[22] * d[25] * d[27] + 2 * d[4] * d[23] * d[25] * d[27] - 2 * d[4] * d[19] * d[26] * d[27] + 2 * d[5] * d[21] * d[26] * d[27] - 2 * d[1] * d[22] * d[26] * d[27] + 2 * d[3] * d[23] * d[26] * d[27] + d[19] * d[20] * std::pow(d[27], 2) - std::pow(d[23], 2) * std::pow(d[27], 2) + 2 * d[7] * d[18] * d[20] * d[28] - 2 * d[6] * d[20] * d[21] * d[28] + 2 * d[8] * d[21] * d[22] * d[28] - 2 * d[7] * std::pow(d[22], 2) * d[28] - 2 * d[8] * d[18] * d[23] * d[28] + 2 * d[6] * d[22] * d[23] * d[28] - 2 * d[3] * d[20] * d[24] * d[28] - 2 * d[2] * d[21] * d[24] * d[28] + 2 * d[5] * d[22] * d[24] * d[28] + 2 * d[4] * d[23] * d[24] * d[28] + 2 * d[2] * d[18] * d[25] * d[28] + 2 * d[0] * d[20] * d[25] * d[28] - 4 * d[4] * d[22] * d[25] * d[28] - 2 * d[5] * d[18] * d[26] * d[28] + 2 * d[4] * d[21] * d[26] * d[28] + 2 * d[3] * d[22] * d[26] * d[28] - 2 * d[0] * d[23] * d[26] * d[28] - 2 * d[20] * d[21] * d[27] * d[28] + 2 * d[22] * d[23] * d[27] * d[28] + d[18] * d[20] * std::pow(d[28], 2) - std::pow(d[22], 2) * std::pow(d[28], 2) + 2 * d[8] * d[18] * d[19] * d[29] - 2 * d[8] * std::pow(d[21], 2) * d[29] - 2 * d[6] * d[19] * d[22] * d[29] + 2 * d[7] * d[21] * d[22] * d[29] - 2 * d[7] * d[18] * d[23] * d[29] + 2 * d[6] * d[21] * d[23] * d[29] - 2 * d[4] * d[19] * d[24] * d[29] + 2 * d[5] * d[21] * d[24] * d[29] - 2 * d[1] * d[22] * d[24] * d[29] + 2 * d[3] * d[23] * d[24] * d[29] - 2 * d[5] * d[18] * d[25] * d[29] + 2 * d[4] * d[21] * d[25] * d[29] + 2 * d[3] * d[22] * d[25] * d[29] - 2 * d[0] * d[23] * d[25] * d[29] + 2 * d[1] * d[18] * d[26] * d[29] + 2 * d[0] * d[19] * d[26] * d[29] - 4 * d[3] * d[21] * d[26] * d[29] - 2 * d[19] * d[22] * d[27] * d[29] + 2 * d[21] * d[23] * d[27] * d[29] + 2 * d[21] * d[22] * d[28] * d[29] - 2 * d[18] * d[23] * d[28] * d[29] + d[18] * d[19] * std::pow(d[29], 2) - std::pow(d[21], 2) * std::pow(d[29], 2) - d[2] * d[18] * d[19] * d[30] - d[1] * d[18] * d[20] * d[30] - d[0] * d[19] * d[20] * d[30] + 2 * d[3] * d[20] * d[21] * d[30] + d[2] * std::pow(d[21], 2) * d[30] + 2 * d[4] * d[19] * d[22] * d[30] - 2 * d[5] * d[21] * d[22] * d[30] + d[1] * std::pow(d[22], 2) * d[30] + 2 * d[5] * d[18] * d[23] * d[30] - 2 * d[4] * d[21] * d[23] * d[30] - 2 * d[3] * d[22] * d[23] * d[30] + d[0] * std::pow(d[23], 2) * d[30];
	coeffs[7] = 2 * d[2] * d[6] * d[10] * d[27] - 2 * d[4] * d[8] * d[10] * d[27] + 2 * d[1] * d[6] * d[11] * d[27] - 2 * d[3] * d[7] * d[11] * d[27] - 2 * d[2] * d[7] * d[12] * d[27] + 2 * d[5] * d[8] * d[12] * d[27] + 2 * d[5] * d[7] * d[13] * d[27] - 2 * d[1] * d[8] * d[13] * d[27] - 4 * d[5] * d[6] * d[14] * d[27] + 2 * d[4] * d[7] * d[14] * d[27] + 2 * d[3] * d[8] * d[14] * d[27] + 2 * d[1] * d[2] * d[15] * d[27] - 2 * std::pow(d[5], 2) * d[15] * d[27] - 2 * d[2] * d[3] * d[16] * d[27] + 2 * d[4] * d[5] * d[16] * d[27] - 2 * d[1] * d[4] * d[17] * d[27] + 2 * d[3] * d[5] * d[17] * d[27] + d[2] * d[10] * std::pow(d[27], 2) + d[1] * d[11] * std::pow(d[27], 2) - 2 * d[5] * d[14] * std::pow(d[27], 2) + 2 * d[2] * d[7] * d[9] * d[28] - 2 * d[5] * d[8] * d[9] * d[28] - 2 * d[3] * d[6] * d[11] * d[28] + 2 * d[0] * d[7] * d[11] * d[28] - 2 * d[2] * d[6] * d[12] * d[28] + 2 * d[4] * d[8] * d[12] * d[28] + 2 * d[5] * d[6] * d[13] * d[28] - 4 * d[4] * d[7] * d[13] * d[28] + 2 * d[3] * d[8] * d[13] * d[28] + 2 * d[4] * d[6] * d[14] * d[28] - 2 * d[0] * d[8] * d[14] * d[28] - 2 * d[2] * d[3] * d[15] * d[28] + 2 * d[4] * d[5] * d[15] * d[28] + 2 * d[0] * d[2] * d[16] * d[28] - 2 * std::pow(d[4], 2) * d[16] * d[28] + 2 * d[3] * d[4] * d[17] * d[28] - 2 * d[0] * d[5] * d[17] * d[28] - 2 * d[3] * d[11] * d[27] * d[28] - 2 * d[2] * d[12] * d[27] * d[28] + 2 * d[5] * d[13] * d[27] * d[28] + 2 * d[4] * d[14] * d[27] * d[28] + d[2] * d[9] * std::pow(d[28], 2) + d[0] * d[11] * std::pow(d[28], 2) - 2 * d[4] * d[13] * std::pow(d[28], 2) - 2 * d[5] * d[7] * d[9] * d[29] + 2 * d[1] * d[8] * d[9] * d[29] - 2 * d[4] * d[6] * d[10] * d[29] + 2 * d[0] * d[8] * d[10] * d[29] + 2 * d[5] * d[6] * d[12] * d[29] + 2 * d[4] * d[7] * d[12] * d[29] - 4 * d[3] * d[8] * d[12] * d[29] - 2 * d[1] * d[6] * d[13] * d[29] + 2 * d[3] * d[7] * d[13] * d[29] + 2 * d[3] * d[6] * d[14] * d[29] - 2 * d[0] * d[7] * d[14] * d[29] - 2 * d[1] * d[4] * d[15] * d[29] + 2 * d[3] * d[5] * d[15] * d[29] + 2 * d[3] * d[4] * d[16] * d[29] - 2 * d[0] * d[5] * d[16] * d[29] + 2 * d[0] * d[1] * d[17] * d[29] - 2 * std::pow(d[3], 2) * d[17] * d[29] - 2 * d[4] * d[10] * d[27] * d[29] + 2 * d[5] * d[12] * d[27] * d[29] - 2 * d[1] * d[13] * d[27] * d[29] + 2 * d[3] * d[14] * d[27] * d[29] - 2 * d[5] * d[9] * d[28] * d[29] + 2 * d[4] * d[12] * d[28] * d[29] + 2 * d[3] * d[13] * d[28] * d[29] - 2 * d[0] * d[14] * d[28] * d[29] + d[1] * d[9] * std::pow(d[29], 2) + d[0] * d[10] * std::pow(d[29], 2) - 2 * d[3] * d[12] * std::pow(d[29], 2) - d[1] * d[2] * d[9] * d[30] + std::pow(d[5], 2) * d[9] * d[30] - d[0] * d[2] * d[10] * d[30] + std::pow(d[4], 2) * d[10] * d[30] - d[0] * d[1] * d[11] * d[30] + std::pow(d[3], 2) * d[11] * d[30] + 2 * d[2] * d[3] * d[12] * d[30] - 2 * d[4] * d[5] * d[12] * d[30] + 2 * d[1] * d[4] * d[13] * d[30] - 2 * d[3] * d[5] * d[13] * d[30] - 2 * d[3] * d[4] * d[14] * d[30] + 2 * d[0] * d[5] * d[14] * d[30];
	coeffs[8] = 2 * d[2] * d[6] * d[19] * d[27] - 2 * d[4] * d[8] * d[19] * d[27] + 2 * d[1] * d[6] * d[20] * d[27] - 2 * d[3] * d[7] * d[20] * d[27] - 2 * d[2] * d[7] * d[21] * d[27] + 2 * d[5] * d[8] * d[21] * d[27] + 2 * d[5] * d[7] * d[22] * d[27] - 2 * d[1] * d[8] * d[22] * d[27] - 4 * d[5] * d[6] * d[23] * d[27] + 2 * d[4] * d[7] * d[23] * d[27] + 2 * d[3] * d[8] * d[23] * d[27] + 2 * d[1] * d[2] * d[24] * d[27] - 2 * std::pow(d[5], 2) * d[24] * d[27] - 2 * d[2] * d[3] * d[25] * d[27] + 2 * d[4] * d[5] * d[25] * d[27] - 2 * d[1] * d[4] * d[26] * d[27] + 2 * d[3] * d[5] * d[26] * d[27] + d[2] * d[19] * std::pow(d[27], 2) + d[1] * d[20] * std::pow(d[27], 2) - 2 * d[5] * d[23] * std::pow(d[27], 2) + 2 * d[2] * d[7] * d[18] * d[28] - 2 * d[5] * d[8] * d[18] * d[28] - 2 * d[3] * d[6] * d[20] * d[28] + 2 * d[0] * d[7] * d[20] * d[28] - 2 * d[2] * d[6] * d[21] * d[28] + 2 * d[4] * d[8] * d[21] * d[28] + 2 * d[5] * d[6] * d[22] * d[28] - 4 * d[4] * d[7] * d[22] * d[28] + 2 * d[3] * d[8] * d[22] * d[28] + 2 * d[4] * d[6] * d[23] * d[28] - 2 * d[0] * d[8] * d[23] * d[28] - 2 * d[2] * d[3] * d[24] * d[28] + 2 * d[4] * d[5] * d[24] * d[28] + 2 * d[0] * d[2] * d[25] * d[28] - 2 * std::pow(d[4], 2) * d[25] * d[28] + 2 * d[3] * d[4] * d[26] * d[28] - 2 * d[0] * d[5] * d[26] * d[28] - 2 * d[3] * d[20] * d[27] * d[28] - 2 * d[2] * d[21] * d[27] * d[28] + 2 * d[5] * d[22] * d[27] * d[28] + 2 * d[4] * d[23] * d[27] * d[28] + d[2] * d[18] * std::pow(d[28], 2) + d[0] * d[20] * std::pow(d[28], 2) - 2 * d[4] * d[22] * std::pow(d[28], 2) - 2 * d[5] * d[7] * d[18] * d[29] + 2 * d[1] * d[8] * d[18] * d[29] - 2 * d[4] * d[6] * d[19] * d[29] + 2 * d[0] * d[8] * d[19] * d[29] + 2 * d[5] * d[6] * d[21] * d[29] + 2 * d[4] * d[7] * d[21] * d[29] - 4 * d[3] * d[8] * d[21] * d[29] - 2 * d[1] * d[6] * d[22] * d[29] + 2 * d[3] * d[7] * d[22] * d[29] + 2 * d[3] * d[6] * d[23] * d[29] - 2 * d[0] * d[7] * d[23] * d[29] - 2 * d[1] * d[4] * d[24] * d[29] + 2 * d[3] * d[5] * d[24] * d[29] + 2 * d[3] * d[4] * d[25] * d[29] - 2 * d[0] * d[5] * d[25] * d[29] + 2 * d[0] * d[1] * d[26] * d[29] - 2 * std::pow(d[3], 2) * d[26] * d[29] - 2 * d[4] * d[19] * d[27] * d[29] + 2 * d[5] * d[21] * d[27] * d[29] - 2 * d[1] * d[22] * d[27] * d[29] + 2 * d[3] * d[23] * d[27] * d[29] - 2 * d[5] * d[18] * d[28] * d[29] + 2 * d[4] * d[21] * d[28] * d[29] + 2 * d[3] * d[22] * d[28] * d[29] - 2 * d[0] * d[23] * d[28] * d[29] + d[1] * d[18] * std::pow(d[29], 2) + d[0] * d[19] * std::pow(d[29], 2) - 2 * d[3] * d[21] * std::pow(d[29], 2) - d[1] * d[2] * d[18] * d[30] + std::pow(d[5], 2) * d[18] * d[30] - d[0] * d[2] * d[19] * d[30] + std::pow(d[4], 2) * d[19] * d[30] - d[0] * d[1] * d[20] * d[30] + std::pow(d[3], 2) * d[20] * d[30] + 2 * d[2] * d[3] * d[21] * d[30] - 2 * d[4] * d[5] * d[21] * d[30] + 2 * d[1] * d[4] * d[22] * d[30] - 2 * d[3] * d[5] * d[22] * d[30] - 2 * d[3] * d[4] * d[23] * d[30] + 2 * d[0] * d[5] * d[23] * d[30];
	coeffs[9] = 2 * d[1] * d[2] * d[6] * d[27] - 2 * std::pow(d[5], 2) * d[6] * d[27] - 2 * d[2] * d[3] * d[7] * d[27] + 2 * d[4] * d[5] * d[7] * d[27] - 2 * d[1] * d[4] * d[8] * d[27] + 2 * d[3] * d[5] * d[8] * d[27] + d[1] * d[2] * std::pow(d[27], 2) - std::pow(d[5], 2) * std::pow(d[27], 2) - 2 * d[2] * d[3] * d[6] * d[28] + 2 * d[4] * d[5] * d[6] * d[28] + 2 * d[0] * d[2] * d[7] * d[28] - 2 * std::pow(d[4], 2) * d[7] * d[28] + 2 * d[3] * d[4] * d[8] * d[28] - 2 * d[0] * d[5] * d[8] * d[28] - 2 * d[2] * d[3] * d[27] * d[28] + 2 * d[4] * d[5] * d[27] * d[28] + d[0] * d[2] * std::pow(d[28], 2) - std::pow(d[4], 2) * std::pow(d[28], 2) - 2 * d[1] * d[4] * d[6] * d[29] + 2 * d[3] * d[5] * d[6] * d[29] + 2 * d[3] * d[4] * d[7] * d[29] - 2 * d[0] * d[5] * d[7] * d[29] + 2 * d[0] * d[1] * d[8] * d[29] - 2 * std::pow(d[3], 2) * d[8] * d[29] - 2 * d[1] * d[4] * d[27] * d[29] + 2 * d[3] * d[5] * d[27] * d[29] + 2 * d[3] * d[4] * d[28] * d[29] - 2 * d[0] * d[5] * d[28] * d[29] + d[0] * d[1] * std::pow(d[29], 2) - std::pow(d[3], 2) * std::pow(d[29], 2) - d[0] * d[1] * d[2] * d[30] + d[2] * std::pow(d[3], 2) * d[30] + d[1] * std::pow(d[4], 2) * d[30] - 2 * d[3] * d[4] * d[5] * d[30] + d[0] * std::pow(d[5], 2) * d[30];
	coeffs[10] = d[10] * d[11] * std::pow(d[15], 2) - std::pow(d[14], 2) * std::pow(d[15], 2) - 2 * d[11] * d[12] * d[15] * d[16] + 2 * d[13] * d[14] * d[15] * d[16] + d[9] * d[11] * std::pow(d[16], 2) - std::pow(d[13], 2) * std::pow(d[16], 2) - 2 * d[10] * d[13] * d[15] * d[17] + 2 * d[12] * d[14] * d[15] * d[17] + 2 * d[12] * d[13] * d[16] * d[17] - 2 * d[9] * d[14] * d[16] * d[17] + d[9] * d[10] * std::pow(d[17], 2) - std::pow(d[12], 2) * std::pow(d[17], 2);
	coeffs[11] = d[11] * std::pow(d[16], 2) * d[18] - 2 * d[14] * d[16] * d[17] * d[18] + d[10] * std::pow(d[17], 2) * d[18] + d[11] * std::pow(d[15], 2) * d[19] - 2 * d[13] * d[15] * d[17] * d[19] + d[9] * std::pow(d[17], 2) * d[19] + d[10] * std::pow(d[15], 2) * d[20] - 2 * d[12] * d[15] * d[16] * d[20] + d[9] * std::pow(d[16], 2) * d[20] - 2 * d[11] * d[15] * d[16] * d[21] + 2 * d[14] * d[15] * d[17] * d[21] + 2 * d[13] * d[16] * d[17] * d[21] - 2 * d[12] * std::pow(d[17], 2) * d[21] + 2 * d[14] * d[15] * d[16] * d[22] - 2 * d[13] * std::pow(d[16], 2) * d[22] - 2 * d[10] * d[15] * d[17] * d[22] + 2 * d[12] * d[16] * d[17] * d[22] - 2 * d[14] * std::pow(d[15], 2) * d[23] + 2 * d[13] * d[15] * d[16] * d[23] + 2 * d[12] * d[15] * d[17] * d[23] - 2 * d[9] * d[16] * d[17] * d[23] + 2 * d[10] * d[11] * d[15] * d[24] - 2 * std::pow(d[14], 2) * d[15] * d[24] - 2 * d[11] * d[12] * d[16] * d[24] + 2 * d[13] * d[14] * d[16] * d[24] - 2 * d[10] * d[13] * d[17] * d[24] + 2 * d[12] * d[14] * d[17] * d[24] - 2 * d[11] * d[12] * d[15] * d[25] + 2 * d[13] * d[14] * d[15] * d[25] + 2 * d[9] * d[11] * d[16] * d[25] - 2 * std::pow(d[13], 2) * d[16] * d[25] + 2 * d[12] * d[13] * d[17] * d[25] - 2 * d[9] * d[14] * d[17] * d[25] - 2 * d[10] * d[13] * d[15] * d[26] + 2 * d[12] * d[14] * d[15] * d[26] + 2 * d[12] * d[13] * d[16] * d[26] - 2 * d[9] * d[14] * d[16] * d[26] + 2 * d[9] * d[10] * d[17] * d[26] - 2 * std::pow(d[12], 2) * d[17] * d[26];
	coeffs[12] = std::pow(d[17], 2) * d[18] * d[19] + std::pow(d[16], 2) * d[18] * d[20] + std::pow(d[15], 2) * d[19] * d[20] - 2 * d[15] * d[16] * d[20] * d[21] - std::pow(d[17], 2) * std::pow(d[21], 2) - 2 * d[15] * d[17] * d[19] * d[22] + 2 * d[16] * d[17] * d[21] * d[22] - std::pow(d[16], 2) * std::pow(d[22], 2) - 2 * d[16] * d[17] * d[18] * d[23] + 2 * d[15] * d[17] * d[21] * d[23] + 2 * d[15] * d[16] * d[22] * d[23] - std::pow(d[15], 2) * std::pow(d[23], 2) + 2 * d[11] * d[15] * d[19] * d[24] - 2 * d[13] * d[17] * d[19] * d[24] + 2 * d[10] * d[15] * d[20] * d[24] - 2 * d[12] * d[16] * d[20] * d[24] - 2 * d[11] * d[16] * d[21] * d[24] + 2 * d[14] * d[17] * d[21] * d[24] + 2 * d[14] * d[16] * d[22] * d[24] - 2 * d[10] * d[17] * d[22] * d[24] - 4 * d[14] * d[15] * d[23] * d[24] + 2 * d[13] * d[16] * d[23] * d[24] + 2 * d[12] * d[17] * d[23] * d[24] + d[10] * d[11] * std::pow(d[24], 2) - std::pow(d[14], 2) * std::pow(d[24], 2) + 2 * d[11] * d[16] * d[18] * d[25] - 2 * d[14] * d[17] * d[18] * d[25] - 2 * d[12] * d[15] * d[20] * d[25] + 2 * d[9] * d[16] * d[20] * d[25] - 2 * d[11] * d[15] * d[21] * d[25] + 2 * d[13] * d[17] * d[21] * d[25] + 2 * d[14] * d[15] * d[22] * d[25] - 4 * d[13] * d[16] * d[22] * d[25] + 2 * d[12] * d[17] * d[22] * d[25] + 2 * d[13] * d[15] * d[23] * d[25] - 2 * d[9] * d[17] * d[23] * d[25] - 2 * d[11] * d[12] * d[24] * d[25] + 2 * d[13] * d[14] * d[24] * d[25] + d[9] * d[11] * std::pow(d[25], 2) - std::pow(d[13], 2) * std::pow(d[25], 2) - 2 * d[14] * d[16] * d[18] * d[26] + 2 * d[10] * d[17] * d[18] * d[26] - 2 * d[13] * d[15] * d[19] * d[26] + 2 * d[9] * d[17] * d[19] * d[26] + 2 * d[14] * d[15] * d[21] * d[26] + 2 * d[13] * d[16] * d[21] * d[26] - 4 * d[12] * d[17] * d[21] * d[26] - 2 * d[10] * d[15] * d[22] * d[26] + 2 * d[12] * d[16] * d[22] * d[26] + 2 * d[12] * d[15] * d[23] * d[26] - 2 * d[9] * d[16] * d[23] * d[26] - 2 * d[10] * d[13] * d[24] * d[26] + 2 * d[12] * d[14] * d[24] * d[26] + 2 * d[12] * d[13] * d[25] * d[26] - 2 * d[9] * d[14] * d[25] * d[26] + d[9] * d[10] * std::pow(d[26], 2) - std::pow(d[12], 2) * std::pow(d[26], 2);
	coeffs[13] = 2 * d[15] * d[19] * d[20] * d[24] - 2 * d[16] * d[20] * d[21] * d[24] - 2 * d[17] * d[19] * d[22] * d[24] + 2 * d[17] * d[21] * d[23] * d[24] + 2 * d[16] * d[22] * d[23] * d[24] - 2 * d[15] * std::pow(d[23], 2) * d[24] + d[11] * d[19] * std::pow(d[24], 2) + d[10] * d[20] * std::pow(d[24], 2) - 2 * d[14] * d[23] * std::pow(d[24], 2) + 2 * d[16] * d[18] * d[20] * d[25] - 2 * d[15] * d[20] * d[21] * d[25] + 2 * d[17] * d[21] * d[22] * d[25] - 2 * d[16] * std::pow(d[22], 2) * d[25] - 2 * d[17] * d[18] * d[23] * d[25] + 2 * d[15] * d[22] * d[23] * d[25] - 2 * d[12] * d[20] * d[24] * d[25] - 2 * d[11] * d[21] * d[24] * d[25] + 2 * d[14] * d[22] * d[24] * d[25] + 2 * d[13] * d[23] * d[24] * d[25] + d[11] * d[18] * std::pow(d[25], 2) + d[9] * d[20] * std::pow(d[25], 2) - 2 * d[13] * d[22] * std::pow(d[25], 2) + 2 * d[17] * d[18] * d[19] * d[26] - 2 * d[17] * std::pow(d[21], 2) * d[26] - 2 * d[15] * d[19] * d[22] * d[26] + 2 * d[16] * d[21] * d[22] * d[26] - 2 * d[16] * d[18] * d[23] * d[26] + 2 * d[15] * d[21] * d[23] * d[26] - 2 * d[13] * d[19] * d[24] * d[26] + 2 * d[14] * d[21] * d[24] * d[26] - 2 * d[10] * d[22] * d[24] * d[26] + 2 * d[12] * d[23] * d[24] * d[26] - 2 * d[14] * d[18] * d[25] * d[26] + 2 * d[13] * d[21] * d[25] * d[26] + 2 * d[12] * d[22] * d[25] * d[26] - 2 * d[9] * d[23] * d[25] * d[26] + d[10] * d[18] * std::pow(d[26], 2) + d[9] * d[19] * std::pow(d[26], 2) - 2 * d[12] * d[21] * std::pow(d[26], 2);
	coeffs[14] = d[19] * d[20] * std::pow(d[24], 2) - std::pow(d[23], 2) * std::pow(d[24], 2) - 2 * d[20] * d[21] * d[24] * d[25] + 2 * d[22] * d[23] * d[24] * d[25] + d[18] * d[20] * std::pow(d[25], 2) - std::pow(d[22], 2) * std::pow(d[25], 2) - 2 * d[19] * d[22] * d[24] * d[26] + 2 * d[21] * d[23] * d[24] * d[26] + 2 * d[21] * d[22] * d[25] * d[26] - 2 * d[18] * d[23] * d[25] * d[26] + d[18] * d[19] * std::pow(d[26], 2) - std::pow(d[21], 2) * std::pow(d[26], 2);
	coeffs[15] = 2 * d[6] * d[10] * d[11] * d[15] - 2 * d[7] * d[11] * d[12] * d[15] - 2 * d[8] * d[10] * d[13] * d[15] + 2 * d[8] * d[12] * d[14] * d[15] + 2 * d[7] * d[13] * d[14] * d[15] - 2 * d[6] * std::pow(d[14], 2) * d[15] + d[2] * d[10] * std::pow(d[15], 2) + d[1] * d[11] * std::pow(d[15], 2) - 2 * d[5] * d[14] * std::pow(d[15], 2) + 2 * d[7] * d[9] * d[11] * d[16] - 2 * d[6] * d[11] * d[12] * d[16] + 2 * d[8] * d[12] * d[13] * d[16] - 2 * d[7] * std::pow(d[13], 2) * d[16] - 2 * d[8] * d[9] * d[14] * d[16] + 2 * d[6] * d[13] * d[14] * d[16] - 2 * d[3] * d[11] * d[15] * d[16] - 2 * d[2] * d[12] * d[15] * d[16] + 2 * d[5] * d[13] * d[15] * d[16] + 2 * d[4] * d[14] * d[15] * d[16] + d[2] * d[9] * std::pow(d[16], 2) + d[0] * d[11] * std::pow(d[16], 2) - 2 * d[4] * d[13] * std::pow(d[16], 2) + 2 * d[8] * d[9] * d[10] * d[17] - 2 * d[8] * std::pow(d[12], 2) * d[17] - 2 * d[6] * d[10] * d[13] * d[17] + 2 * d[7] * d[12] * d[13] * d[17] - 2 * d[7] * d[9] * d[14] * d[17] + 2 * d[6] * d[12] * d[14] * d[17] - 2 * d[4] * d[10] * d[15] * d[17] + 2 * d[5] * d[12] * d[15] * d[17] - 2 * d[1] * d[13] * d[15] * d[17] + 2 * d[3] * d[14] * d[15] * d[17] - 2 * d[5] * d[9] * d[16] * d[17] + 2 * d[4] * d[12] * d[16] * d[17] + 2 * d[3] * d[13] * d[16] * d[17] - 2 * d[0] * d[14] * d[16] * d[17] + d[1] * d[9] * std::pow(d[17], 2) + d[0] * d[10] * std::pow(d[17], 2) - 2 * d[3] * d[12] * std::pow(d[17], 2) - d[9] * d[10] * d[11] * d[31] + d[11] * std::pow(d[12], 2) * d[31] + d[10] * std::pow(d[13], 2) * d[31] - 2 * d[12] * d[13] * d[14] * d[31] + d[9] * std::pow(d[14], 2) * d[31];
	coeffs[16] = 2 * d[7] * d[11] * d[16] * d[18] - 2 * d[8] * d[14] * d[16] * d[18] + d[2] * std::pow(d[16], 2) * d[18] + 2 * d[8] * d[10] * d[17] * d[18] - 2 * d[7] * d[14] * d[17] * d[18] - 2 * d[5] * d[16] * d[17] * d[18] + d[1] * std::pow(d[17], 2) * d[18] + 2 * d[6] * d[11] * d[15] * d[19] - 2 * d[8] * d[13] * d[15] * d[19] + d[2] * std::pow(d[15], 2) * d[19] + 2 * d[8] * d[9] * d[17] * d[19] - 2 * d[6] * d[13] * d[17] * d[19] - 2 * d[4] * d[15] * d[17] * d[19] + d[0] * std::pow(d[17], 2) * d[19] + 2 * d[6] * d[10] * d[15] * d[20] - 2 * d[7] * d[12] * d[15] * d[20] + d[1] * std::pow(d[15], 2) * d[20] + 2 * d[7] * d[9] * d[16] * d[20] - 2 * d[6] * d[12] * d[16] * d[20] - 2 * d[3] * d[15] * d[16] * d[20] + d[0] * std::pow(d[16], 2) * d[20] - 2 * d[7] * d[11] * d[15] * d[21] + 2 * d[8] * d[14] * d[15] * d[21] - 2 * d[6] * d[11] * d[16] * d[21] + 2 * d[8] * d[13] * d[16] * d[21] - 2 * d[2] * d[15] * d[16] * d[21] - 4 * d[8] * d[12] * d[17] * d[21] + 2 * d[7] * d[13] * d[17] * d[21] + 2 * d[6] * d[14] * d[17] * d[21] + 2 * d[5] * d[15] * d[17] * d[21] + 2 * d[4] * d[16] * d[17] * d[21] - 2 * d[3] * std::pow(d[17], 2) * d[21] - 2 * d[8] * d[10] * d[15] * d[22] + 2 * d[7] * d[14] * d[15] * d[22] + 2 * d[8] * d[12] * d[16] * d[22] - 4 * d[7] * d[13] * d[16] * d[22] + 2 * d[6] * d[14] * d[16] * d[22] + 2 * d[5] * d[15] * d[16] * d[22] - 2 * d[4] * std::pow(d[16], 2) * d[22] - 2 * d[6] * d[10] * d[17] * d[22] + 2 * d[7] * d[12] * d[17] * d[22] - 2 * d[1] * d[15] * d[17] * d[22] + 2 * d[3] * d[16] * d[17] * d[22] + 2 * d[8] * d[12] * d[15] * d[23] + 2 * d[7] * d[13] * d[15] * d[23] - 4 * d[6] * d[14] * d[15] * d[23] - 2 * d[5] * std::pow(d[15], 2) * d[23] - 2 * d[8] * d[9] * d[16] * d[23] + 2 * d[6] * d[13] * d[16] * d[23] + 2 * d[4] * d[15] * d[16] * d[23] - 2 * d[7] * d[9] * d[17] * d[23] + 2 * d[6] * d[12] * d[17] * d[23] + 2 * d[3] * d[15] * d[17] * d[23] - 2 * d[0] * d[16] * d[17] * d[23] + 2 * d[6] * d[10] * d[11] * d[24] - 2 * d[7] * d[11] * d[12] * d[24] - 2 * d[8] * d[10] * d[13] * d[24] + 2 * d[8] * d[12] * d[14] * d[24] + 2 * d[7] * d[13] * d[14] * d[24] - 2 * d[6] * std::pow(d[14], 2) * d[24] + 2 * d[2] * d[10] * d[15] * d[24] + 2 * d[1] * d[11] * d[15] * d[24] - 4 * d[5] * d[14] * d[15] * d[24] - 2 * d[3] * d[11] * d[16] * d[24] - 2 * d[2] * d[12] * d[16] * d[24] + 2 * d[5] * d[13] * d[16] * d[24] + 2 * d[4] * d[14] * d[16] * d[24] - 2 * d[4] * d[10] * d[17] * d[24] + 2 * d[5] * d[12] * d[17] * d[24] - 2 * d[1] * d[13] * d[17] * d[24] + 2 * d[3] * d[14] * d[17] * d[24] + 2 * d[7] * d[9] * d[11] * d[25] - 2 * d[6] * d[11] * d[12] * d[25] + 2 * d[8] * d[12] * d[13] * d[25] - 2 * d[7] * std::pow(d[13], 2) * d[25] - 2 * d[8] * d[9] * d[14] * d[25] + 2 * d[6] * d[13] * d[14] * d[25] - 2 * d[3] * d[11] * d[15] * d[25] - 2 * d[2] * d[12] * d[15] * d[25] + 2 * d[5] * d[13] * d[15] * d[25] + 2 * d[4] * d[14] * d[15] * d[25] + 2 * d[2] * d[9] * d[16] * d[25] + 2 * d[0] * d[11] * d[16] * d[25] - 4 * d[4] * d[13] * d[16] * d[25] - 2 * d[5] * d[9] * d[17] * d[25] + 2 * d[4] * d[12] * d[17] * d[25] + 2 * d[3] * d[13] * d[17] * d[25] - 2 * d[0] * d[14] * d[17] * d[25] + 2 * d[8] * d[9] * d[10] * d[26] - 2 * d[8] * std::pow(d[12], 2) * d[26] - 2 * d[6] * d[10] * d[13] * d[26] + 2 * d[7] * d[12] * d[13] * d[26] - 2 * d[7] * d[9] * d[14] * d[26] + 2 * d[6] * d[12] * d[14] * d[26] - 2 * d[4] * d[10] * d[15] * d[26] + 2 * d[5] * d[12] * d[15] * d[26] - 2 * d[1] * d[13] * d[15] * d[26] + 2 * d[3] * d[14] * d[15] * d[26] - 2 * d[5] * d[9] * d[16] * d[26] + 2 * d[4] * d[12] * d[16] * d[26] + 2 * d[3] * d[13] * d[16] * d[26] - 2 * d[0] * d[14] * d[16] * d[26] + 2 * d[1] * d[9] * d[17] * d[26] + 2 * d[0] * d[10] * d[17] * d[26] - 4 * d[3] * d[12] * d[17] * d[26] - d[10] * d[11] * d[18] * d[31] + std::pow(d[14], 2) * d[18] * d[31] - d[9] * d[11] * d[19] * d[31] + std::pow(d[13], 2) * d[19] * d[31] - d[9] * d[10] * d[20] * d[31] + std::pow(d[12], 2) * d[20] * d[31] + 2 * d[11] * d[12] * d[21] * d[31] - 2 * d[13] * d[14] * d[21] * d[31] + 2 * d[10] * d[13] * d[22] * d[31] - 2 * d[12] * d[14] * d[22] * d[31] - 2 * d[12] * d[13] * d[23] * d[31] + 2 * d[9] * d[14] * d[23] * d[31];
	coeffs[17] = 2 * d[8] * d[17] * d[18] * d[19] + 2 * d[7] * d[16] * d[18] * d[20] + 2 * d[6] * d[15] * d[19] * d[20] - 2 * d[7] * d[15] * d[20] * d[21] - 2 * d[6] * d[16] * d[20] * d[21] - 2 * d[8] * d[17] * std::pow(d[21], 2) - 2 * d[8] * d[15] * d[19] * d[22] - 2 * d[6] * d[17] * d[19] * d[22] + 2 * d[8] * d[16] * d[21] * d[22] + 2 * d[7] * d[17] * d[21] * d[22] - 2 * d[7] * d[16] * std::pow(d[22], 2) - 2 * d[8] * d[16] * d[18] * d[23] - 2 * d[7] * d[17] * d[18] * d[23] + 2 * d[8] * d[15] * d[21] * d[23] + 2 * d[6] * d[17] * d[21] * d[23] + 2 * d[7] * d[15] * d[22] * d[23] + 2 * d[6] * d[16] * d[22] * d[23] - 2 * d[6] * d[15] * std::pow(d[23], 2) + 2 * d[6] * d[11] * d[19] * d[24] - 2 * d[8] * d[13] * d[19] * d[24] + 2 * d[2] * d[15] * d[19] * d[24] - 2 * d[4] * d[17] * d[19] * d[24] + 2 * d[6] * d[10] * d[20] * d[24] - 2 * d[7] * d[12] * d[20] * d[24] + 2 * d[1] * d[15] * d[20] * d[24] - 2 * d[3] * d[16] * d[20] * d[24] - 2 * d[7] * d[11] * d[21] * d[24] + 2 * d[8] * d[14] * d[21] * d[24] - 2 * d[2] * d[16] * d[21] * d[24] + 2 * d[5] * d[17] * d[21] * d[24] - 2 * d[8] * d[10] * d[22] * d[24] + 2 * d[7] * d[14] * d[22] * d[24] + 2 * d[5] * d[16] * d[22] * d[24] - 2 * d[1] * d[17] * d[22] * d[24] + 2 * d[8] * d[12] * d[23] * d[24] + 2 * d[7] * d[13] * d[23] * d[24] - 4 * d[6] * d[14] * d[23] * d[24] - 4 * d[5] * d[15] * d[23] * d[24] + 2 * d[4] * d[16] * d[23] * d[24] + 2 * d[3] * d[17] * d[23] * d[24] + d[2] * d[10] * std::pow(d[24], 2) + d[1] * d[11] * std::pow(d[24], 2) - 2 * d[5] * d[14] * std::pow(d[24], 2) + 2 * d[7] * d[11] * d[18] * d[25] - 2 * d[8] * d[14] * d[18] * d[25] + 2 * d[2] * d[16] * d[18] * d[25] - 2 * d[5] * d[17] * d[18] * d[25] + 2 * d[7] * d[9] * d[20] * d[25] - 2 * d[6] * d[12] * d[20] * d[25] - 2 * d[3] * d[15] * d[20] * d[25] + 2 * d[0] * d[16] * d[20] * d[25] - 2 * d[6] * d[11] * d[21] * d[25] + 2 * d[8] * d[13] * d[21] * d[25] - 2 * d[2] * d[15] * d[21] * d[25] + 2 * d[4] * d[17] * d[21] * d[25] + 2 * d[8] * d[12] * d[22] * d[25] - 4 * d[7] * d[13] * d[22] * d[25] + 2 * d[6] * d[14] * d[22] * d[25] + 2 * d[5] * d[15] * d[22] * d[25] - 4 * d[4] * d[16] * d[22] * d[25] + 2 * d[3] * d[17] * d[22] * d[25] - 2 * d[8] * d[9] * d[23] * d[25] + 2 * d[6] * d[13] * d[23] * d[25] + 2 * d[4] * d[15] * d[23] * d[25] - 2 * d[0] * d[17] * d[23] * d[25] - 2 * d[3] * d[11] * d[24] * d[25] - 2 * d[2] * d[12] * d[24] * d[25] + 2 * d[5] * d[13] * d[24] * d[25] + 2 * d[4] * d[14] * d[24] * d[25] + d[2] * d[9] * std::pow(d[25], 2) + d[0] * d[11] * std::pow(d[25], 2) - 2 * d[4] * d[13] * std::pow(d[25], 2) + 2 * d[8] * d[10] * d[18] * d[26] - 2 * d[7] * d[14] * d[18] * d[26] - 2 * d[5] * d[16] * d[18] * d[26] + 2 * d[1] * d[17] * d[18] * d[26] + 2 * d[8] * d[9] * d[19] * d[26] - 2 * d[6] * d[13] * d[19] * d[26] - 2 * d[4] * d[15] * d[19] * d[26] + 2 * d[0] * d[17] * d[19] * d[26] - 4 * d[8] * d[12] * d[21] * d[26] + 2 * d[7] * d[13] * d[21] * d[26] + 2 * d[6] * d[14] * d[21] * d[26] + 2 * d[5] * d[15] * d[21] * d[26] + 2 * d[4] * d[16] * d[21] * d[26] - 4 * d[3] * d[17] * d[21] * d[26] - 2 * d[6] * d[10] * d[22] * d[26] + 2 * d[7] * d[12] * d[22] * d[26] - 2 * d[1] * d[15] * d[22] * d[26] + 2 * d[3] * d[16] * d[22] * d[26] - 2 * d[7] * d[9] * d[23] * d[26] + 2 * d[6] * d[12] * d[23] * d[26] + 2 * d[3] * d[15] * d[23] * d[26] - 2 * d[0] * d[16] * d[23] * d[26] - 2 * d[4] * d[10] * d[24] * d[26] + 2 * d[5] * d[12] * d[24] * d[26] - 2 * d[1] * d[13] * d[24] * d[26] + 2 * d[3] * d[14] * d[24] * d[26] - 2 * d[5] * d[9] * d[25] * d[26] + 2 * d[4] * d[12] * d[25] * d[26] + 2 * d[3] * d[13] * d[25] * d[26] - 2 * d[0] * d[14] * d[25] * d[26] + d[1] * d[9] * std::pow(d[26], 2) + d[0] * d[10] * std::pow(d[26], 2) - 2 * d[3] * d[12] * std::pow(d[26], 2) - d[11] * d[18] * d[19] * d[31] - d[10] * d[18] * d[20] * d[31] - d[9] * d[19] * d[20] * d[31] + 2 * d[12] * d[20] * d[21] * d[31] + d[11] * std::pow(d[21], 2) * d[31] + 2 * d[13] * d[19] * d[22] * d[31] - 2 * d[14] * d[21] * d[22] * d[31] + d[10] * std::pow(d[22], 2) * d[31] + 2 * d[14] * d[18] * d[23] * d[31] - 2 * d[13] * d[21] * d[23] * d[31] - 2 * d[12] * d[22] * d[23] * d[31] + d[9] * std::pow(d[23], 2) * d[31];
	coeffs[18] = 2 * d[6] * d[19] * d[20] * d[24] - 2 * d[7] * d[20] * d[21] * d[24] - 2 * d[8] * d[19] * d[22] * d[24] + 2 * d[8] * d[21] * d[23] * d[24] + 2 * d[7] * d[22] * d[23] * d[24] - 2 * d[6] * std::pow(d[23], 2) * d[24] + d[2] * d[19] * std::pow(d[24], 2) + d[1] * d[20] * std::pow(d[24], 2) - 2 * d[5] * d[23] * std::pow(d[24], 2) + 2 * d[7] * d[18] * d[20] * d[25] - 2 * d[6] * d[20] * d[21] * d[25] + 2 * d[8] * d[21] * d[22] * d[25] - 2 * d[7] * std::pow(d[22], 2) * d[25] - 2 * d[8] * d[18] * d[23] * d[25] + 2 * d[6] * d[22] * d[23] * d[25] - 2 * d[3] * d[20] * d[24] * d[25] - 2 * d[2] * d[21] * d[24] * d[25] + 2 * d[5] * d[22] * d[24] * d[25] + 2 * d[4] * d[23] * d[24] * d[25] + d[2] * d[18] * std::pow(d[25], 2) + d[0] * d[20] * std::pow(d[25], 2) - 2 * d[4] * d[22] * std::pow(d[25], 2) + 2 * d[8] * d[18] * d[19] * d[26] - 2 * d[8] * std::pow(d[21], 2) * d[26] - 2 * d[6] * d[19] * d[22] * d[26] + 2 * d[7] * d[21] * d[22] * d[26] - 2 * d[7] * d[18] * d[23] * d[26] + 2 * d[6] * d[21] * d[23] * d[26] - 2 * d[4] * d[19] * d[24] * d[26] + 2 * d[5] * d[21] * d[24] * d[26] - 2 * d[1] * d[22] * d[24] * d[26] + 2 * d[3] * d[23] * d[24] * d[26] - 2 * d[5] * d[18] * d[25] * d[26] + 2 * d[4] * d[21] * d[25] * d[26] + 2 * d[3] * d[22] * d[25] * d[26] - 2 * d[0] * d[23] * d[25] * d[26] + d[1] * d[18] * std::pow(d[26], 2) + d[0] * d[19] * std::pow(d[26], 2) - 2 * d[3] * d[21] * std::pow(d[26], 2) - d[18] * d[19] * d[20] * d[31] + d[20] * std::pow(d[21], 2) * d[31] + d[19] * std::pow(d[22], 2) * d[31] - 2 * d[21] * d[22] * d[23] * d[31] + d[18] * std::pow(d[23], 2) * d[31];
	coeffs[19] = std::pow(d[8], 2) * d[9] * d[10] + std::pow(d[7], 2) * d[9] * d[11] + std::pow(d[6], 2) * d[10] * d[11] - 2 * d[6] * d[7] * d[11] * d[12] - std::pow(d[8], 2) * std::pow(d[12], 2) - 2 * d[6] * d[8] * d[10] * d[13] + 2 * d[7] * d[8] * d[12] * d[13] - std::pow(d[7], 2) * std::pow(d[13], 2) - 2 * d[7] * d[8] * d[9] * d[14] + 2 * d[6] * d[8] * d[12] * d[14] + 2 * d[6] * d[7] * d[13] * d[14] - std::pow(d[6], 2) * std::pow(d[14], 2) + 2 * d[2] * d[6] * d[10] * d[15] - 2 * d[4] * d[8] * d[10] * d[15] + 2 * d[1] * d[6] * d[11] * d[15] - 2 * d[3] * d[7] * d[11] * d[15] - 2 * d[2] * d[7] * d[12] * d[15] + 2 * d[5] * d[8] * d[12] * d[15] + 2 * d[5] * d[7] * d[13] * d[15] - 2 * d[1] * d[8] * d[13] * d[15] - 4 * d[5] * d[6] * d[14] * d[15] + 2 * d[4] * d[7] * d[14] * d[15] + 2 * d[3] * d[8] * d[14] * d[15] + d[1] * d[2] * std::pow(d[15], 2) - std::pow(d[5], 2) * std::pow(d[15], 2) + 2 * d[2] * d[7] * d[9] * d[16] - 2 * d[5] * d[8] * d[9] * d[16] - 2 * d[3] * d[6] * d[11] * d[16] + 2 * d[0] * d[7] * d[11] * d[16] - 2 * d[2] * d[6] * d[12] * d[16] + 2 * d[4] * d[8] * d[12] * d[16] + 2 * d[5] * d[6] * d[13] * d[16] - 4 * d[4] * d[7] * d[13] * d[16] + 2 * d[3] * d[8] * d[13] * d[16] + 2 * d[4] * d[6] * d[14] * d[16] - 2 * d[0] * d[8] * d[14] * d[16] - 2 * d[2] * d[3] * d[15] * d[16] + 2 * d[4] * d[5] * d[15] * d[16] + d[0] * d[2] * std::pow(d[16], 2) - std::pow(d[4], 2) * std::pow(d[16], 2) - 2 * d[5] * d[7] * d[9] * d[17] + 2 * d[1] * d[8] * d[9] * d[17] - 2 * d[4] * d[6] * d[10] * d[17] + 2 * d[0] * d[8] * d[10] * d[17] + 2 * d[5] * d[6] * d[12] * d[17] + 2 * d[4] * d[7] * d[12] * d[17] - 4 * d[3] * d[8] * d[12] * d[17] - 2 * d[1] * d[6] * d[13] * d[17] + 2 * d[3] * d[7] * d[13] * d[17] + 2 * d[3] * d[6] * d[14] * d[17] - 2 * d[0] * d[7] * d[14] * d[17] - 2 * d[1] * d[4] * d[15] * d[17] + 2 * d[3] * d[5] * d[15] * d[17] + 2 * d[3] * d[4] * d[16] * d[17] - 2 * d[0] * d[5] * d[16] * d[17] + d[0] * d[1] * std::pow(d[17], 2) - std::pow(d[3], 2) * std::pow(d[17], 2) - d[2] * d[9] * d[10] * d[31] - d[1] * d[9] * d[11] * d[31] - d[0] * d[10] * d[11] * d[31] + 2 * d[3] * d[11] * d[12] * d[31] + d[2] * std::pow(d[12], 2) * d[31] + 2 * d[4] * d[10] * d[13] * d[31] - 2 * d[5] * d[12] * d[13] * d[31] + d[1] * std::pow(d[13], 2) * d[31] + 2 * d[5] * d[9] * d[14] * d[31] - 2 * d[4] * d[12] * d[14] * d[31] - 2 * d[3] * d[13] * d[14] * d[31] + d[0] * std::pow(d[14], 2) * d[31];
	coeffs[20] = std::pow(d[8], 2) * d[10] * d[18] + std::pow(d[7], 2) * d[11] * d[18] - 2 * d[7] * d[8] * d[14] * d[18] + 2 * d[2] * d[7] * d[16] * d[18] - 2 * d[5] * d[8] * d[16] * d[18] - 2 * d[5] * d[7] * d[17] * d[18] + 2 * d[1] * d[8] * d[17] * d[18] + std::pow(d[8], 2) * d[9] * d[19] + std::pow(d[6], 2) * d[11] * d[19] - 2 * d[6] * d[8] * d[13] * d[19] + 2 * d[2] * d[6] * d[15] * d[19] - 2 * d[4] * d[8] * d[15] * d[19] - 2 * d[4] * d[6] * d[17] * d[19] + 2 * d[0] * d[8] * d[17] * d[19] + std::pow(d[7], 2) * d[9] * d[20] + std::pow(d[6], 2) * d[10] * d[20] - 2 * d[6] * d[7] * d[12] * d[20] + 2 * d[1] * d[6] * d[15] * d[20] - 2 * d[3] * d[7] * d[15] * d[20] - 2 * d[3] * d[6] * d[16] * d[20] + 2 * d[0] * d[7] * d[16] * d[20] - 2 * d[6] * d[7] * d[11] * d[21] - 2 * std::pow(d[8], 2) * d[12] * d[21] + 2 * d[7] * d[8] * d[13] * d[21] + 2 * d[6] * d[8] * d[14] * d[21] - 2 * d[2] * d[7] * d[15] * d[21] + 2 * d[5] * d[8] * d[15] * d[21] - 2 * d[2] * d[6] * d[16] * d[21] + 2 * d[4] * d[8] * d[16] * d[21] + 2 * d[5] * d[6] * d[17] * d[21] + 2 * d[4] * d[7] * d[17] * d[21] - 4 * d[3] * d[8] * d[17] * d[21] - 2 * d[6] * d[8] * d[10] * d[22] + 2 * d[7] * d[8] * d[12] * d[22] - 2 * std::pow(d[7], 2) * d[13] * d[22] + 2 * d[6] * d[7] * d[14] * d[22] + 2 * d[5] * d[7] * d[15] * d[22] - 2 * d[1] * d[8] * d[15] * d[22] + 2 * d[5] * d[6] * d[16] * d[22] - 4 * d[4] * d[7] * d[16] * d[22] + 2 * d[3] * d[8] * d[16] * d[22] - 2 * d[1] * d[6] * d[17] * d[22] + 2 * d[3] * d[7] * d[17] * d[22] - 2 * d[7] * d[8] * d[9] * d[23] + 2 * d[6] * d[8] * d[12] * d[23] + 2 * d[6] * d[7] * d[13] * d[23] - 2 * std::pow(d[6], 2) * d[14] * d[23] - 4 * d[5] * d[6] * d[15] * d[23] + 2 * d[4] * d[7] * d[15] * d[23] + 2 * d[3] * d[8] * d[15] * d[23] + 2 * d[4] * d[6] * d[16] * d[23] - 2 * d[0] * d[8] * d[16] * d[23] + 2 * d[3] * d[6] * d[17] * d[23] - 2 * d[0] * d[7] * d[17] * d[23] + 2 * d[2] * d[6] * d[10] * d[24] - 2 * d[4] * d[8] * d[10] * d[24] + 2 * d[1] * d[6] * d[11] * d[24] - 2 * d[3] * d[7] * d[11] * d[24] - 2 * d[2] * d[7] * d[12] * d[24] + 2 * d[5] * d[8] * d[12] * d[24] + 2 * d[5] * d[7] * d[13] * d[24] - 2 * d[1] * d[8] * d[13] * d[24] - 4 * d[5] * d[6] * d[14] * d[24] + 2 * d[4] * d[7] * d[14] * d[24] + 2 * d[3] * d[8] * d[14] * d[24] + 2 * d[1] * d[2] * d[15] * d[24] - 2 * std::pow(d[5], 2) * d[15] * d[24] - 2 * d[2] * d[3] * d[16] * d[24] + 2 * d[4] * d[5] * d[16] * d[24] - 2 * d[1] * d[4] * d[17] * d[24] + 2 * d[3] * d[5] * d[17] * d[24] + 2 * d[2] * d[7] * d[9] * d[25] - 2 * d[5] * d[8] * d[9] * d[25] - 2 * d[3] * d[6] * d[11] * d[25] + 2 * d[0] * d[7] * d[11] * d[25] - 2 * d[2] * d[6] * d[12] * d[25] + 2 * d[4] * d[8] * d[12] * d[25] + 2 * d[5] * d[6] * d[13] * d[25] - 4 * d[4] * d[7] * d[13] * d[25] + 2 * d[3] * d[8] * d[13] * d[25] + 2 * d[4] * d[6] * d[14] * d[25] - 2 * d[0] * d[8] * d[14] * d[25] - 2 * d[2] * d[3] * d[15] * d[25] + 2 * d[4] * d[5] * d[15] * d[25] + 2 * d[0] * d[2] * d[16] * d[25] - 2 * std::pow(d[4], 2) * d[16] * d[25] + 2 * d[3] * d[4] * d[17] * d[25] - 2 * d[0] * d[5] * d[17] * d[25] - 2 * d[5] * d[7] * d[9] * d[26] + 2 * d[1] * d[8] * d[9] * d[26] - 2 * d[4] * d[6] * d[10] * d[26] + 2 * d[0] * d[8] * d[10] * d[26] + 2 * d[5] * d[6] * d[12] * d[26] + 2 * d[4] * d[7] * d[12] * d[26] - 4 * d[3] * d[8] * d[12] * d[26] - 2 * d[1] * d[6] * d[13] * d[26] + 2 * d[3] * d[7] * d[13] * d[26] + 2 * d[3] * d[6] * d[14] * d[26] - 2 * d[0] * d[7] * d[14] * d[26] - 2 * d[1] * d[4] * d[15] * d[26] + 2 * d[3] * d[5] * d[15] * d[26] + 2 * d[3] * d[4] * d[16] * d[26] - 2 * d[0] * d[5] * d[16] * d[26] + 2 * d[0] * d[1] * d[17] * d[26] - 2 * std::pow(d[3], 2) * d[17] * d[26] - d[2] * d[10] * d[18] * d[31] - d[1] * d[11] * d[18] * d[31] + 2 * d[5] * d[14] * d[18] * d[31] - d[2] * d[9] * d[19] * d[31] - d[0] * d[11] * d[19] * d[31] + 2 * d[4] * d[13] * d[19] * d[31] - d[1] * d[9] * d[20] * d[31] - d[0] * d[10] * d[20] * d[31] + 2 * d[3] * d[12] * d[20] * d[31] + 2 * d[3] * d[11] * d[21] * d[31] + 2 * d[2] * d[12] * d[21] * d[31] - 2 * d[5] * d[13] * d[21] * d[31] - 2 * d[4] * d[14] * d[21] * d[31] + 2 * d[4] * d[10] * d[22] * d[31] - 2 * d[5] * d[12] * d[22] * d[31] + 2 * d[1] * d[13] * d[22] * d[31] - 2 * d[3] * d[14] * d[22] * d[31] + 2 * d[5] * d[9] * d[23] * d[31] - 2 * d[4] * d[12] * d[23] * d[31] - 2 * d[3] * d[13] * d[23] * d[31] + 2 * d[0] * d[14] * d[23] * d[31];
	coeffs[21] = std::pow(d[8], 2) * d[18] * d[19] + std::pow(d[7], 2) * d[18] * d[20] + std::pow(d[6], 2) * d[19] * d[20] - 2 * d[6] * d[7] * d[20] * d[21] - std::pow(d[8], 2) * std::pow(d[21], 2) - 2 * d[6] * d[8] * d[19] * d[22] + 2 * d[7] * d[8] * d[21] * d[22] - std::pow(d[7], 2) * std::pow(d[22], 2) - 2 * d[7] * d[8] * d[18] * d[23] + 2 * d[6] * d[8] * d[21] * d[23] + 2 * d[6] * d[7] * d[22] * d[23] - std::pow(d[6], 2) * std::pow(d[23], 2) + 2 * d[2] * d[6] * d[19] * d[24] - 2 * d[4] * d[8] * d[19] * d[24] + 2 * d[1] * d[6] * d[20] * d[24] - 2 * d[3] * d[7] * d[20] * d[24] - 2 * d[2] * d[7] * d[21] * d[24] + 2 * d[5] * d[8] * d[21] * d[24] + 2 * d[5] * d[7] * d[22] * d[24] - 2 * d[1] * d[8] * d[22] * d[24] - 4 * d[5] * d[6] * d[23] * d[24] + 2 * d[4] * d[7] * d[23] * d[24] + 2 * d[3] * d[8] * d[23] * d[24] + d[1] * d[2] * std::pow(d[24], 2) - std::pow(d[5], 2) * std::pow(d[24], 2) + 2 * d[2] * d[7] * d[18] * d[25] - 2 * d[5] * d[8] * d[18] * d[25] - 2 * d[3] * d[6] * d[20] * d[25] + 2 * d[0] * d[7] * d[20] * d[25] - 2 * d[2] * d[6] * d[21] * d[25] + 2 * d[4] * d[8] * d[21] * d[25] + 2 * d[5] * d[6] * d[22] * d[25] - 4 * d[4] * d[7] * d[22] * d[25] + 2 * d[3] * d[8] * d[22] * d[25] + 2 * d[4] * d[6] * d[23] * d[25] - 2 * d[0] * d[8] * d[23] * d[25] - 2 * d[2] * d[3] * d[24] * d[25] + 2 * d[4] * d[5] * d[24] * d[25] + d[0] * d[2] * std::pow(d[25], 2) - std::pow(d[4], 2) * std::pow(d[25], 2) - 2 * d[5] * d[7] * d[18] * d[26] + 2 * d[1] * d[8] * d[18] * d[26] - 2 * d[4] * d[6] * d[19] * d[26] + 2 * d[0] * d[8] * d[19] * d[26] + 2 * d[5] * d[6] * d[21] * d[26] + 2 * d[4] * d[7] * d[21] * d[26] - 4 * d[3] * d[8] * d[21] * d[26] - 2 * d[1] * d[6] * d[22] * d[26] + 2 * d[3] * d[7] * d[22] * d[26] + 2 * d[3] * d[6] * d[23] * d[26] - 2 * d[0] * d[7] * d[23] * d[26] - 2 * d[1] * d[4] * d[24] * d[26] + 2 * d[3] * d[5] * d[24] * d[26] + 2 * d[3] * d[4] * d[25] * d[26] - 2 * d[0] * d[5] * d[25] * d[26] + d[0] * d[1] * std::pow(d[26], 2) - std::pow(d[3], 2) * std::pow(d[26], 2) - d[2] * d[18] * d[19] * d[31] - d[1] * d[18] * d[20] * d[31] - d[0] * d[19] * d[20] * d[31] + 2 * d[3] * d[20] * d[21] * d[31] + d[2] * std::pow(d[21], 2) * d[31] + 2 * d[4] * d[19] * d[22] * d[31] - 2 * d[5] * d[21] * d[22] * d[31] + d[1] * std::pow(d[22], 2) * d[31] + 2 * d[5] * d[18] * d[23] * d[31] - 2 * d[4] * d[21] * d[23] * d[31] - 2 * d[3] * d[22] * d[23] * d[31] + d[0] * std::pow(d[23], 2) * d[31];
	coeffs[22] = d[2] * std::pow(d[7], 2) * d[9] - 2 * d[5] * d[7] * d[8] * d[9] + d[1] * std::pow(d[8], 2) * d[9] + d[2] * std::pow(d[6], 2) * d[10] - 2 * d[4] * d[6] * d[8] * d[10] + d[0] * std::pow(d[8], 2) * d[10] + d[1] * std::pow(d[6], 2) * d[11] - 2 * d[3] * d[6] * d[7] * d[11] + d[0] * std::pow(d[7], 2) * d[11] - 2 * d[2] * d[6] * d[7] * d[12] + 2 * d[5] * d[6] * d[8] * d[12] + 2 * d[4] * d[7] * d[8] * d[12] - 2 * d[3] * std::pow(d[8], 2) * d[12] + 2 * d[5] * d[6] * d[7] * d[13] - 2 * d[4] * std::pow(d[7], 2) * d[13] - 2 * d[1] * d[6] * d[8] * d[13] + 2 * d[3] * d[7] * d[8] * d[13] - 2 * d[5] * std::pow(d[6], 2) * d[14] + 2 * d[4] * d[6] * d[7] * d[14] + 2 * d[3] * d[6] * d[8] * d[14] - 2 * d[0] * d[7] * d[8] * d[14] + 2 * d[1] * d[2] * d[6] * d[15] - 2 * std::pow(d[5], 2) * d[6] * d[15] - 2 * d[2] * d[3] * d[7] * d[15] + 2 * d[4] * d[5] * d[7] * d[15] - 2 * d[1] * d[4] * d[8] * d[15] + 2 * d[3] * d[5] * d[8] * d[15] - 2 * d[2] * d[3] * d[6] * d[16] + 2 * d[4] * d[5] * d[6] * d[16] + 2 * d[0] * d[2] * d[7] * d[16] - 2 * std::pow(d[4], 2) * d[7] * d[16] + 2 * d[3] * d[4] * d[8] * d[16] - 2 * d[0] * d[5] * d[8] * d[16] - 2 * d[1] * d[4] * d[6] * d[17] + 2 * d[3] * d[5] * d[6] * d[17] + 2 * d[3] * d[4] * d[7] * d[17] - 2 * d[0] * d[5] * d[7] * d[17] + 2 * d[0] * d[1] * d[8] * d[17] - 2 * std::pow(d[3], 2) * d[8] * d[17] - d[1] * d[2] * d[9] * d[31] + std::pow(d[5], 2) * d[9] * d[31] - d[0] * d[2] * d[10] * d[31] + std::pow(d[4], 2) * d[10] * d[31] - d[0] * d[1] * d[11] * d[31] + std::pow(d[3], 2) * d[11] * d[31] + 2 * d[2] * d[3] * d[12] * d[31] - 2 * d[4] * d[5] * d[12] * d[31] + 2 * d[1] * d[4] * d[13] * d[31] - 2 * d[3] * d[5] * d[13] * d[31] - 2 * d[3] * d[4] * d[14] * d[31] + 2 * d[0] * d[5] * d[14] * d[31];
	coeffs[23] = d[2] * std::pow(d[7], 2) * d[18] - 2 * d[5] * d[7] * d[8] * d[18] + d[1] * std::pow(d[8], 2) * d[18] + d[2] * std::pow(d[6], 2) * d[19] - 2 * d[4] * d[6] * d[8] * d[19] + d[0] * std::pow(d[8], 2) * d[19] + d[1] * std::pow(d[6], 2) * d[20] - 2 * d[3] * d[6] * d[7] * d[20] + d[0] * std::pow(d[7], 2) * d[20] - 2 * d[2] * d[6] * d[7] * d[21] + 2 * d[5] * d[6] * d[8] * d[21] + 2 * d[4] * d[7] * d[8] * d[21] - 2 * d[3] * std::pow(d[8], 2) * d[21] + 2 * d[5] * d[6] * d[7] * d[22] - 2 * d[4] * std::pow(d[7], 2) * d[22] - 2 * d[1] * d[6] * d[8] * d[22] + 2 * d[3] * d[7] * d[8] * d[22] - 2 * d[5] * std::pow(d[6], 2) * d[23] + 2 * d[4] * d[6] * d[7] * d[23] + 2 * d[3] * d[6] * d[8] * d[23] - 2 * d[0] * d[7] * d[8] * d[23] + 2 * d[1] * d[2] * d[6] * d[24] - 2 * std::pow(d[5], 2) * d[6] * d[24] - 2 * d[2] * d[3] * d[7] * d[24] + 2 * d[4] * d[5] * d[7] * d[24] - 2 * d[1] * d[4] * d[8] * d[24] + 2 * d[3] * d[5] * d[8] * d[24] - 2 * d[2] * d[3] * d[6] * d[25] + 2 * d[4] * d[5] * d[6] * d[25] + 2 * d[0] * d[2] * d[7] * d[25] - 2 * std::pow(d[4], 2) * d[7] * d[25] + 2 * d[3] * d[4] * d[8] * d[25] - 2 * d[0] * d[5] * d[8] * d[25] - 2 * d[1] * d[4] * d[6] * d[26] + 2 * d[3] * d[5] * d[6] * d[26] + 2 * d[3] * d[4] * d[7] * d[26] - 2 * d[0] * d[5] * d[7] * d[26] + 2 * d[0] * d[1] * d[8] * d[26] - 2 * std::pow(d[3], 2) * d[8] * d[26] - d[1] * d[2] * d[18] * d[31] + std::pow(d[5], 2) * d[18] * d[31] - d[0] * d[2] * d[19] * d[31] + std::pow(d[4], 2) * d[19] * d[31] - d[0] * d[1] * d[20] * d[31] + std::pow(d[3], 2) * d[20] * d[31] + 2 * d[2] * d[3] * d[21] * d[31] - 2 * d[4] * d[5] * d[21] * d[31] + 2 * d[1] * d[4] * d[22] * d[31] - 2 * d[3] * d[5] * d[22] * d[31] - 2 * d[3] * d[4] * d[23] * d[31] + 2 * d[0] * d[5] * d[23] * d[31];
	coeffs[24] = d[1] * d[2] * std::pow(d[6], 2) - std::pow(d[5], 2) * std::pow(d[6], 2) - 2 * d[2] * d[3] * d[6] * d[7] + 2 * d[4] * d[5] * d[6] * d[7] + d[0] * d[2] * std::pow(d[7], 2) - std::pow(d[4], 2) * std::pow(d[7], 2) - 2 * d[1] * d[4] * d[6] * d[8] + 2 * d[3] * d[5] * d[6] * d[8] + 2 * d[3] * d[4] * d[7] * d[8] - 2 * d[0] * d[5] * d[7] * d[8] + d[0] * d[1] * std::pow(d[8], 2) - std::pow(d[3], 2) * std::pow(d[8], 2) - d[0] * d[1] * d[2] * d[31] + d[2] * std::pow(d[3], 2) * d[31] + d[1] * std::pow(d[4], 2) * d[31] - 2 * d[3] * d[4] * d[5] * d[31] + d[0] * std::pow(d[5], 2) * d[31];
	coeffs[25] = d[9] * d[10] * d[11] - d[11] * std::pow(d[12], 2) - d[10] * std::pow(d[13], 2) + 2 * d[12] * d[13] * d[14] - d[9] * std::pow(d[14], 2);
	coeffs[26] = d[10] * d[11] * d[18] - std::pow(d[14], 2) * d[18] + d[9] * d[11] * d[19] - std::pow(d[13], 2) * d[19] + d[9] * d[10] * d[20] - std::pow(d[12], 2) * d[20] - 2 * d[11] * d[12] * d[21] + 2 * d[13] * d[14] * d[21] - 2 * d[10] * d[13] * d[22] + 2 * d[12] * d[14] * d[22] + 2 * d[12] * d[13] * d[23] - 2 * d[9] * d[14] * d[23];
	coeffs[27] = d[11] * d[18] * d[19] + d[10] * d[18] * d[20] + d[9] * d[19] * d[20] - 2 * d[12] * d[20] * d[21] - d[11] * std::pow(d[21], 2) - 2 * d[13] * d[19] * d[22] + 2 * d[14] * d[21] * d[22] - d[10] * std::pow(d[22], 2) - 2 * d[14] * d[18] * d[23] + 2 * d[13] * d[21] * d[23] + 2 * d[12] * d[22] * d[23] - d[9] * std::pow(d[23], 2);
	coeffs[28] = d[18] * d[19] * d[20] - d[20] * std::pow(d[21], 2) - d[19] * std::pow(d[22], 2) + 2 * d[21] * d[22] * d[23] - d[18] * std::pow(d[23], 2);
	coeffs[29] = d[2] * d[9] * d[10] + d[1] * d[9] * d[11] + d[0] * d[10] * d[11] - 2 * d[3] * d[11] * d[12] - d[2] * std::pow(d[12], 2) - 2 * d[4] * d[10] * d[13] + 2 * d[5] * d[12] * d[13] - d[1] * std::pow(d[13], 2) - 2 * d[5] * d[9] * d[14] + 2 * d[4] * d[12] * d[14] + 2 * d[3] * d[13] * d[14] - d[0] * std::pow(d[14], 2);
	coeffs[30] = d[2] * d[10] * d[18] + d[1] * d[11] * d[18] - 2 * d[5] * d[14] * d[18] + d[2] * d[9] * d[19] + d[0] * d[11] * d[19] - 2 * d[4] * d[13] * d[19] + d[1] * d[9] * d[20] + d[0] * d[10] * d[20] - 2 * d[3] * d[12] * d[20] - 2 * d[3] * d[11] * d[21] - 2 * d[2] * d[12] * d[21] + 2 * d[5] * d[13] * d[21] + 2 * d[4] * d[14] * d[21] - 2 * d[4] * d[10] * d[22] + 2 * d[5] * d[12] * d[22] - 2 * d[1] * d[13] * d[22] + 2 * d[3] * d[14] * d[22] - 2 * d[5] * d[9] * d[23] + 2 * d[4] * d[12] * d[23] + 2 * d[3] * d[13] * d[23] - 2 * d[0] * d[14] * d[23];
	coeffs[31] = d[2] * d[18] * d[19] + d[1] * d[18] * d[20] + d[0] * d[19] * d[20] - 2 * d[3] * d[20] * d[21] - d[2] * std::pow(d[21], 2) - 2 * d[4] * d[19] * d[22] + 2 * d[5] * d[21] * d[22] - d[1] * std::pow(d[22], 2) - 2 * d[5] * d[18] * d[23] + 2 * d[4] * d[21] * d[23] + 2 * d[3] * d[22] * d[23] - d[0] * std::pow(d[23], 2);
	coeffs[32] = d[1] * d[2] * d[9] - std::pow(d[5], 2) * d[9] + d[0] * d[2] * d[10] - std::pow(d[4], 2) * d[10] + d[0] * d[1] * d[11] - std::pow(d[3], 2) * d[11] - 2 * d[2] * d[3] * d[12] + 2 * d[4] * d[5] * d[12] - 2 * d[1] * d[4] * d[13] + 2 * d[3] * d[5] * d[13] + 2 * d[3] * d[4] * d[14] - 2 * d[0] * d[5] * d[14];
	coeffs[33] = d[1] * d[2] * d[18] - std::pow(d[5], 2) * d[18] + d[0] * d[2] * d[19] - std::pow(d[4], 2) * d[19] + d[0] * d[1] * d[20] - std::pow(d[3], 2) * d[20] - 2 * d[2] * d[3] * d[21] + 2 * d[4] * d[5] * d[21] - 2 * d[1] * d[4] * d[22] + 2 * d[3] * d[5] * d[22] + 2 * d[3] * d[4] * d[23] - 2 * d[0] * d[5] * d[23];
	coeffs[34] = -1;
	coeffs[35] = d[0] * d[1] * d[2] - d[2] * std::pow(d[3], 2) - d[1] * std::pow(d[4], 2) + 2 * d[3] * d[4] * d[5] - d[0] * std::pow(d[5], 2);

	// Setup elimination template
	static const int coeffs0_ind[] = {0, 10, 1, 0, 10, 11, 2, 1, 0, 10, 11, 12, 3, 2, 1, 0, 11, 12, 13, 3, 2, 1, 12, 13, 14, 3, 2, 13, 14, 4, 0, 10, 15, 5, 4, 15, 1, 10, 11, 0, 16, 6, 5, 4, 15, 16, 2, 11, 0, 12, 1, 17, 6, 5, 4, 16, 17, 3, 12, 1, 13, 2, 18, 7, 4, 15, 10, 0, 19, 8, 7, 19, 5, 15, 16, 11, 0, 1, 4, 20, 9, 7, 19, 15, 4, 0, 22, 8, 7, 19, 20, 6, 16, 4, 17, 12, 1, 2, 5, 21, 6, 5, 17, 18, 13, 2, 14, 3, 3, 14};
	static const int coeffs1_ind[] = {24, 9, 24, 22, 9, 7, 9, 22, 19, 7, 4, 24, 9, 22, 8, 19, 20, 16, 4, 5, 1, 7, 23, 24, 22, 23, 20, 7, 8, 5, 9, 9, 22, 23, 20, 7, 21, 17, 5, 6, 2, 8, 8, 7, 20, 21, 17, 5, 18, 13, 2, 3, 6, 24, 23, 9, 8, 24, 23, 9, 21, 8, 6, 9, 23, 21, 8, 18, 6, 3, 8, 21, 18, 6, 14, 3, 6, 18, 14, 3};
	static const int C0_ind[] = {0, 15, 16, 17, 21, 31, 32, 33, 34, 36, 37, 47, 48, 49, 50, 51, 52, 53, 63, 65, 66, 67, 68, 69, 79, 82, 83, 84, 85, 96, 102, 105, 111, 112, 113, 117, 118, 119, 121, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 166, 169, 170, 172, 175, 176, 177, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 198, 201, 202, 204, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 231, 232, 233, 238, 243, 244};
	static const int C1_ind[] = {10, 13, 25, 26, 28, 29, 38, 41, 42, 44, 45, 47, 49, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 69, 71, 73, 74, 75, 76, 77, 78, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 119, 122, 123, 125, 132, 135, 136, 138, 139, 141, 147, 148, 151, 152, 154, 155, 157, 163, 164, 167, 168, 170, 171, 179, 180, 183, 184};

	Matrix<double, 16, 16> C0;
	C0.setZero();
	Matrix<double, 16, 12> C1;
	C1.setZero();
	for (int i = 0; i < 110; i++)
	{
		C0(C0_ind[i]) = coeffs(coeffs0_ind[i]);
	}
	for (int i = 0; i < 80; i++)
	{
		C1(C1_ind[i]) = coeffs(coeffs1_ind[i]);
	}

	Matrix<double, 16, 12> C12 = C0.partialPivLu().solve(C1);

	// Setup action matrix
	Matrix<double, 15, 12> RR;
	RR << -C12.bottomRows(3), Matrix<double, 12, 12>::Identity(12, 12);

	static const int AM_ind[] = {10, 7, 6, 0, 8, 9, 1, 11, 12, 13, 14, 2};
	Matrix<double, 12, 12> AM;
	for (int i = 0; i < 12; i++)
	{
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 3, 12> sols;
	sols.setZero();

	// Solve eigenvalue problem
	EigenSolver<Matrix<double, 12, 12>> es(AM);
	ArrayXcd D = es.eigenvalues();
	ArrayXXcd V = es.eigenvectors();

	V = (V / V.row(0).array().replicate(12, 1)).eval();

	sols.row(0) = V.row(1).array();
	sols.row(1) = D.transpose().array();

	return sols;
}
// Action =  y
// Quotient ring basis (V) = 1,x,x^2,x^2*y,x*y,x*y^2,x*y^3,y,y^2,y^3,y^4,y^5,
// Available monomials (RR*V) = x^2*y^2,x*y^4,y^6,1,x,x^2,x^2*y,x*y,x*y^2,x*y^3,y,y^2,y^3,y^4,y^5,

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_sat_711:nrhs", "One input required.");
	}
	if (nlhs != 1)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_sat_711:nlhs", "One output required.");
	}
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]))
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_sat_711:notDouble", "Input data must be type double.");
	}
	if (mxGetNumberOfElements(prhs[0]) % 32 != 0)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_sat_711:incorrectSize", "Input size must be multiple of 32.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 32;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(3, 12 * n_instances, mxCOMPLEX);
	double *zr = mxGetPr(plhs[0]);
	double *zi = mxGetPi(plhs[0]);
	for (int k = 0; k < n_instances; k++)
	{
		const VectorXd data = Map<const VectorXd>(input + k * 32, 32);
		MatrixXcd sols = solver_toa_upgrade_sat_711(data);
		Index offset = k * sols.size();
		for (Index i = 0; i < sols.size(); i++)
		{
			zr[i + offset] = sols(i).real();
			zi[i + offset] = sols(i).imag();
		}
	}
}
