#include <Eigen/Dense>
#include "mex.h"

using namespace Eigen;

MatrixXcd solver_toa_upgrade_720(const VectorXd &data)
{
	// Compute coefficients
	const double *d = data.data();
	VectorXd coeffs(20);
	coeffs[0] = 2 * d[10] * d[11] * d[15] * d[27] - 2 * std::pow(d[14], 2) * d[15] * d[27] - 2 * d[11] * d[12] * d[16] * d[27] + 2 * d[13] * d[14] * d[16] * d[27] - 2 * d[10] * d[13] * d[17] * d[27] + 2 * d[12] * d[14] * d[17] * d[27] - 2 * d[11] * d[12] * d[15] * d[28] + 2 * d[13] * d[14] * d[15] * d[28] + 2 * d[9] * d[11] * d[16] * d[28] - 2 * std::pow(d[13], 2) * d[16] * d[28] + 2 * d[12] * d[13] * d[17] * d[28] - 2 * d[9] * d[14] * d[17] * d[28] - 2 * d[10] * d[13] * d[15] * d[29] + 2 * d[12] * d[14] * d[15] * d[29] + 2 * d[12] * d[13] * d[16] * d[29] - 2 * d[9] * d[14] * d[16] * d[29] + 2 * d[9] * d[10] * d[17] * d[29] - 2 * std::pow(d[12], 2) * d[17] * d[29] - d[9] * d[10] * d[11] * d[33] + d[11] * std::pow(d[12], 2) * d[33] + d[10] * std::pow(d[13], 2) * d[33] - 2 * d[12] * d[13] * d[14] * d[33] + d[9] * std::pow(d[14], 2) * d[33];
	coeffs[1] = 2 * d[11] * d[15] * d[19] * d[27] - 2 * d[13] * d[17] * d[19] * d[27] + 2 * d[10] * d[15] * d[20] * d[27] - 2 * d[12] * d[16] * d[20] * d[27] - 2 * d[11] * d[16] * d[21] * d[27] + 2 * d[14] * d[17] * d[21] * d[27] + 2 * d[14] * d[16] * d[22] * d[27] - 2 * d[10] * d[17] * d[22] * d[27] - 4 * d[14] * d[15] * d[23] * d[27] + 2 * d[13] * d[16] * d[23] * d[27] + 2 * d[12] * d[17] * d[23] * d[27] + 2 * d[10] * d[11] * d[24] * d[27] - 2 * std::pow(d[14], 2) * d[24] * d[27] - 2 * d[11] * d[12] * d[25] * d[27] + 2 * d[13] * d[14] * d[25] * d[27] - 2 * d[10] * d[13] * d[26] * d[27] + 2 * d[12] * d[14] * d[26] * d[27] + 2 * d[11] * d[16] * d[18] * d[28] - 2 * d[14] * d[17] * d[18] * d[28] - 2 * d[12] * d[15] * d[20] * d[28] + 2 * d[9] * d[16] * d[20] * d[28] - 2 * d[11] * d[15] * d[21] * d[28] + 2 * d[13] * d[17] * d[21] * d[28] + 2 * d[14] * d[15] * d[22] * d[28] - 4 * d[13] * d[16] * d[22] * d[28] + 2 * d[12] * d[17] * d[22] * d[28] + 2 * d[13] * d[15] * d[23] * d[28] - 2 * d[9] * d[17] * d[23] * d[28] - 2 * d[11] * d[12] * d[24] * d[28] + 2 * d[13] * d[14] * d[24] * d[28] + 2 * d[9] * d[11] * d[25] * d[28] - 2 * std::pow(d[13], 2) * d[25] * d[28] + 2 * d[12] * d[13] * d[26] * d[28] - 2 * d[9] * d[14] * d[26] * d[28] - 2 * d[14] * d[16] * d[18] * d[29] + 2 * d[10] * d[17] * d[18] * d[29] - 2 * d[13] * d[15] * d[19] * d[29] + 2 * d[9] * d[17] * d[19] * d[29] + 2 * d[14] * d[15] * d[21] * d[29] + 2 * d[13] * d[16] * d[21] * d[29] - 4 * d[12] * d[17] * d[21] * d[29] - 2 * d[10] * d[15] * d[22] * d[29] + 2 * d[12] * d[16] * d[22] * d[29] + 2 * d[12] * d[15] * d[23] * d[29] - 2 * d[9] * d[16] * d[23] * d[29] - 2 * d[10] * d[13] * d[24] * d[29] + 2 * d[12] * d[14] * d[24] * d[29] + 2 * d[12] * d[13] * d[25] * d[29] - 2 * d[9] * d[14] * d[25] * d[29] + 2 * d[9] * d[10] * d[26] * d[29] - 2 * std::pow(d[12], 2) * d[26] * d[29] - d[10] * d[11] * d[18] * d[33] + std::pow(d[14], 2) * d[18] * d[33] - d[9] * d[11] * d[19] * d[33] + std::pow(d[13], 2) * d[19] * d[33] - d[9] * d[10] * d[20] * d[33] + std::pow(d[12], 2) * d[20] * d[33] + 2 * d[11] * d[12] * d[21] * d[33] - 2 * d[13] * d[14] * d[21] * d[33] + 2 * d[10] * d[13] * d[22] * d[33] - 2 * d[12] * d[14] * d[22] * d[33] - 2 * d[12] * d[13] * d[23] * d[33] + 2 * d[9] * d[14] * d[23] * d[33];
	coeffs[2] = 2 * d[15] * d[19] * d[20] * d[27] - 2 * d[16] * d[20] * d[21] * d[27] - 2 * d[17] * d[19] * d[22] * d[27] + 2 * d[17] * d[21] * d[23] * d[27] + 2 * d[16] * d[22] * d[23] * d[27] - 2 * d[15] * std::pow(d[23], 2) * d[27] + 2 * d[11] * d[19] * d[24] * d[27] + 2 * d[10] * d[20] * d[24] * d[27] - 4 * d[14] * d[23] * d[24] * d[27] - 2 * d[12] * d[20] * d[25] * d[27] - 2 * d[11] * d[21] * d[25] * d[27] + 2 * d[14] * d[22] * d[25] * d[27] + 2 * d[13] * d[23] * d[25] * d[27] - 2 * d[13] * d[19] * d[26] * d[27] + 2 * d[14] * d[21] * d[26] * d[27] - 2 * d[10] * d[22] * d[26] * d[27] + 2 * d[12] * d[23] * d[26] * d[27] + 2 * d[16] * d[18] * d[20] * d[28] - 2 * d[15] * d[20] * d[21] * d[28] + 2 * d[17] * d[21] * d[22] * d[28] - 2 * d[16] * std::pow(d[22], 2) * d[28] - 2 * d[17] * d[18] * d[23] * d[28] + 2 * d[15] * d[22] * d[23] * d[28] - 2 * d[12] * d[20] * d[24] * d[28] - 2 * d[11] * d[21] * d[24] * d[28] + 2 * d[14] * d[22] * d[24] * d[28] + 2 * d[13] * d[23] * d[24] * d[28] + 2 * d[11] * d[18] * d[25] * d[28] + 2 * d[9] * d[20] * d[25] * d[28] - 4 * d[13] * d[22] * d[25] * d[28] - 2 * d[14] * d[18] * d[26] * d[28] + 2 * d[13] * d[21] * d[26] * d[28] + 2 * d[12] * d[22] * d[26] * d[28] - 2 * d[9] * d[23] * d[26] * d[28] + 2 * d[17] * d[18] * d[19] * d[29] - 2 * d[17] * std::pow(d[21], 2) * d[29] - 2 * d[15] * d[19] * d[22] * d[29] + 2 * d[16] * d[21] * d[22] * d[29] - 2 * d[16] * d[18] * d[23] * d[29] + 2 * d[15] * d[21] * d[23] * d[29] - 2 * d[13] * d[19] * d[24] * d[29] + 2 * d[14] * d[21] * d[24] * d[29] - 2 * d[10] * d[22] * d[24] * d[29] + 2 * d[12] * d[23] * d[24] * d[29] - 2 * d[14] * d[18] * d[25] * d[29] + 2 * d[13] * d[21] * d[25] * d[29] + 2 * d[12] * d[22] * d[25] * d[29] - 2 * d[9] * d[23] * d[25] * d[29] + 2 * d[10] * d[18] * d[26] * d[29] + 2 * d[9] * d[19] * d[26] * d[29] - 4 * d[12] * d[21] * d[26] * d[29] - d[11] * d[18] * d[19] * d[33] - d[10] * d[18] * d[20] * d[33] - d[9] * d[19] * d[20] * d[33] + 2 * d[12] * d[20] * d[21] * d[33] + d[11] * std::pow(d[21], 2) * d[33] + 2 * d[13] * d[19] * d[22] * d[33] - 2 * d[14] * d[21] * d[22] * d[33] + d[10] * std::pow(d[22], 2) * d[33] + 2 * d[14] * d[18] * d[23] * d[33] - 2 * d[13] * d[21] * d[23] * d[33] - 2 * d[12] * d[22] * d[23] * d[33] + d[9] * std::pow(d[23], 2) * d[33];
	coeffs[3] = 2 * d[19] * d[20] * d[24] * d[27] - 2 * std::pow(d[23], 2) * d[24] * d[27] - 2 * d[20] * d[21] * d[25] * d[27] + 2 * d[22] * d[23] * d[25] * d[27] - 2 * d[19] * d[22] * d[26] * d[27] + 2 * d[21] * d[23] * d[26] * d[27] - 2 * d[20] * d[21] * d[24] * d[28] + 2 * d[22] * d[23] * d[24] * d[28] + 2 * d[18] * d[20] * d[25] * d[28] - 2 * std::pow(d[22], 2) * d[25] * d[28] + 2 * d[21] * d[22] * d[26] * d[28] - 2 * d[18] * d[23] * d[26] * d[28] - 2 * d[19] * d[22] * d[24] * d[29] + 2 * d[21] * d[23] * d[24] * d[29] + 2 * d[21] * d[22] * d[25] * d[29] - 2 * d[18] * d[23] * d[25] * d[29] + 2 * d[18] * d[19] * d[26] * d[29] - 2 * std::pow(d[21], 2) * d[26] * d[29] - d[18] * d[19] * d[20] * d[33] + d[20] * std::pow(d[21], 2) * d[33] + d[19] * std::pow(d[22], 2) * d[33] - 2 * d[21] * d[22] * d[23] * d[33] + d[18] * std::pow(d[23], 2) * d[33];
	coeffs[4] = 2 * d[6] * d[10] * d[11] * d[27] - 2 * d[7] * d[11] * d[12] * d[27] - 2 * d[8] * d[10] * d[13] * d[27] + 2 * d[8] * d[12] * d[14] * d[27] + 2 * d[7] * d[13] * d[14] * d[27] - 2 * d[6] * std::pow(d[14], 2) * d[27] + 2 * d[2] * d[10] * d[15] * d[27] + 2 * d[1] * d[11] * d[15] * d[27] - 4 * d[5] * d[14] * d[15] * d[27] - 2 * d[3] * d[11] * d[16] * d[27] - 2 * d[2] * d[12] * d[16] * d[27] + 2 * d[5] * d[13] * d[16] * d[27] + 2 * d[4] * d[14] * d[16] * d[27] - 2 * d[4] * d[10] * d[17] * d[27] + 2 * d[5] * d[12] * d[17] * d[27] - 2 * d[1] * d[13] * d[17] * d[27] + 2 * d[3] * d[14] * d[17] * d[27] + d[10] * d[11] * std::pow(d[27], 2) - std::pow(d[14], 2) * std::pow(d[27], 2) + 2 * d[7] * d[9] * d[11] * d[28] - 2 * d[6] * d[11] * d[12] * d[28] + 2 * d[8] * d[12] * d[13] * d[28] - 2 * d[7] * std::pow(d[13], 2) * d[28] - 2 * d[8] * d[9] * d[14] * d[28] + 2 * d[6] * d[13] * d[14] * d[28] - 2 * d[3] * d[11] * d[15] * d[28] - 2 * d[2] * d[12] * d[15] * d[28] + 2 * d[5] * d[13] * d[15] * d[28] + 2 * d[4] * d[14] * d[15] * d[28] + 2 * d[2] * d[9] * d[16] * d[28] + 2 * d[0] * d[11] * d[16] * d[28] - 4 * d[4] * d[13] * d[16] * d[28] - 2 * d[5] * d[9] * d[17] * d[28] + 2 * d[4] * d[12] * d[17] * d[28] + 2 * d[3] * d[13] * d[17] * d[28] - 2 * d[0] * d[14] * d[17] * d[28] - 2 * d[11] * d[12] * d[27] * d[28] + 2 * d[13] * d[14] * d[27] * d[28] + d[9] * d[11] * std::pow(d[28], 2) - std::pow(d[13], 2) * std::pow(d[28], 2) + 2 * d[8] * d[9] * d[10] * d[29] - 2 * d[8] * std::pow(d[12], 2) * d[29] - 2 * d[6] * d[10] * d[13] * d[29] + 2 * d[7] * d[12] * d[13] * d[29] - 2 * d[7] * d[9] * d[14] * d[29] + 2 * d[6] * d[12] * d[14] * d[29] - 2 * d[4] * d[10] * d[15] * d[29] + 2 * d[5] * d[12] * d[15] * d[29] - 2 * d[1] * d[13] * d[15] * d[29] + 2 * d[3] * d[14] * d[15] * d[29] - 2 * d[5] * d[9] * d[16] * d[29] + 2 * d[4] * d[12] * d[16] * d[29] + 2 * d[3] * d[13] * d[16] * d[29] - 2 * d[0] * d[14] * d[16] * d[29] + 2 * d[1] * d[9] * d[17] * d[29] + 2 * d[0] * d[10] * d[17] * d[29] - 4 * d[3] * d[12] * d[17] * d[29] - 2 * d[10] * d[13] * d[27] * d[29] + 2 * d[12] * d[14] * d[27] * d[29] + 2 * d[12] * d[13] * d[28] * d[29] - 2 * d[9] * d[14] * d[28] * d[29] + d[9] * d[10] * std::pow(d[29], 2) - std::pow(d[12], 2) * std::pow(d[29], 2) - d[2] * d[9] * d[10] * d[33] - d[1] * d[9] * d[11] * d[33] - d[0] * d[10] * d[11] * d[33] + 2 * d[3] * d[11] * d[12] * d[33] + d[2] * std::pow(d[12], 2) * d[33] + 2 * d[4] * d[10] * d[13] * d[33] - 2 * d[5] * d[12] * d[13] * d[33] + d[1] * std::pow(d[13], 2) * d[33] + 2 * d[5] * d[9] * d[14] * d[33] - 2 * d[4] * d[12] * d[14] * d[33] - 2 * d[3] * d[13] * d[14] * d[33] + d[0] * std::pow(d[14], 2) * d[33];
	coeffs[5] = 2 * d[6] * d[11] * d[19] * d[27] - 2 * d[8] * d[13] * d[19] * d[27] + 2 * d[2] * d[15] * d[19] * d[27] - 2 * d[4] * d[17] * d[19] * d[27] + 2 * d[6] * d[10] * d[20] * d[27] - 2 * d[7] * d[12] * d[20] * d[27] + 2 * d[1] * d[15] * d[20] * d[27] - 2 * d[3] * d[16] * d[20] * d[27] - 2 * d[7] * d[11] * d[21] * d[27] + 2 * d[8] * d[14] * d[21] * d[27] - 2 * d[2] * d[16] * d[21] * d[27] + 2 * d[5] * d[17] * d[21] * d[27] - 2 * d[8] * d[10] * d[22] * d[27] + 2 * d[7] * d[14] * d[22] * d[27] + 2 * d[5] * d[16] * d[22] * d[27] - 2 * d[1] * d[17] * d[22] * d[27] + 2 * d[8] * d[12] * d[23] * d[27] + 2 * d[7] * d[13] * d[23] * d[27] - 4 * d[6] * d[14] * d[23] * d[27] - 4 * d[5] * d[15] * d[23] * d[27] + 2 * d[4] * d[16] * d[23] * d[27] + 2 * d[3] * d[17] * d[23] * d[27] + 2 * d[2] * d[10] * d[24] * d[27] + 2 * d[1] * d[11] * d[24] * d[27] - 4 * d[5] * d[14] * d[24] * d[27] - 2 * d[3] * d[11] * d[25] * d[27] - 2 * d[2] * d[12] * d[25] * d[27] + 2 * d[5] * d[13] * d[25] * d[27] + 2 * d[4] * d[14] * d[25] * d[27] - 2 * d[4] * d[10] * d[26] * d[27] + 2 * d[5] * d[12] * d[26] * d[27] - 2 * d[1] * d[13] * d[26] * d[27] + 2 * d[3] * d[14] * d[26] * d[27] + d[11] * d[19] * std::pow(d[27], 2) + d[10] * d[20] * std::pow(d[27], 2) - 2 * d[14] * d[23] * std::pow(d[27], 2) + 2 * d[7] * d[11] * d[18] * d[28] - 2 * d[8] * d[14] * d[18] * d[28] + 2 * d[2] * d[16] * d[18] * d[28] - 2 * d[5] * d[17] * d[18] * d[28] + 2 * d[7] * d[9] * d[20] * d[28] - 2 * d[6] * d[12] * d[20] * d[28] - 2 * d[3] * d[15] * d[20] * d[28] + 2 * d[0] * d[16] * d[20] * d[28] - 2 * d[6] * d[11] * d[21] * d[28] + 2 * d[8] * d[13] * d[21] * d[28] - 2 * d[2] * d[15] * d[21] * d[28] + 2 * d[4] * d[17] * d[21] * d[28] + 2 * d[8] * d[12] * d[22] * d[28] - 4 * d[7] * d[13] * d[22] * d[28] + 2 * d[6] * d[14] * d[22] * d[28] + 2 * d[5] * d[15] * d[22] * d[28] - 4 * d[4] * d[16] * d[22] * d[28] + 2 * d[3] * d[17] * d[22] * d[28] - 2 * d[8] * d[9] * d[23] * d[28] + 2 * d[6] * d[13] * d[23] * d[28] + 2 * d[4] * d[15] * d[23] * d[28] - 2 * d[0] * d[17] * d[23] * d[28] - 2 * d[3] * d[11] * d[24] * d[28] - 2 * d[2] * d[12] * d[24] * d[28] + 2 * d[5] * d[13] * d[24] * d[28] + 2 * d[4] * d[14] * d[24] * d[28] + 2 * d[2] * d[9] * d[25] * d[28] + 2 * d[0] * d[11] * d[25] * d[28] - 4 * d[4] * d[13] * d[25] * d[28] - 2 * d[5] * d[9] * d[26] * d[28] + 2 * d[4] * d[12] * d[26] * d[28] + 2 * d[3] * d[13] * d[26] * d[28] - 2 * d[0] * d[14] * d[26] * d[28] - 2 * d[12] * d[20] * d[27] * d[28] - 2 * d[11] * d[21] * d[27] * d[28] + 2 * d[14] * d[22] * d[27] * d[28] + 2 * d[13] * d[23] * d[27] * d[28] + d[11] * d[18] * std::pow(d[28], 2) + d[9] * d[20] * std::pow(d[28], 2) - 2 * d[13] * d[22] * std::pow(d[28], 2) + 2 * d[8] * d[10] * d[18] * d[29] - 2 * d[7] * d[14] * d[18] * d[29] - 2 * d[5] * d[16] * d[18] * d[29] + 2 * d[1] * d[17] * d[18] * d[29] + 2 * d[8] * d[9] * d[19] * d[29] - 2 * d[6] * d[13] * d[19] * d[29] - 2 * d[4] * d[15] * d[19] * d[29] + 2 * d[0] * d[17] * d[19] * d[29] - 4 * d[8] * d[12] * d[21] * d[29] + 2 * d[7] * d[13] * d[21] * d[29] + 2 * d[6] * d[14] * d[21] * d[29] + 2 * d[5] * d[15] * d[21] * d[29] + 2 * d[4] * d[16] * d[21] * d[29] - 4 * d[3] * d[17] * d[21] * d[29] - 2 * d[6] * d[10] * d[22] * d[29] + 2 * d[7] * d[12] * d[22] * d[29] - 2 * d[1] * d[15] * d[22] * d[29] + 2 * d[3] * d[16] * d[22] * d[29] - 2 * d[7] * d[9] * d[23] * d[29] + 2 * d[6] * d[12] * d[23] * d[29] + 2 * d[3] * d[15] * d[23] * d[29] - 2 * d[0] * d[16] * d[23] * d[29] - 2 * d[4] * d[10] * d[24] * d[29] + 2 * d[5] * d[12] * d[24] * d[29] - 2 * d[1] * d[13] * d[24] * d[29] + 2 * d[3] * d[14] * d[24] * d[29] - 2 * d[5] * d[9] * d[25] * d[29] + 2 * d[4] * d[12] * d[25] * d[29] + 2 * d[3] * d[13] * d[25] * d[29] - 2 * d[0] * d[14] * d[25] * d[29] + 2 * d[1] * d[9] * d[26] * d[29] + 2 * d[0] * d[10] * d[26] * d[29] - 4 * d[3] * d[12] * d[26] * d[29] - 2 * d[13] * d[19] * d[27] * d[29] + 2 * d[14] * d[21] * d[27] * d[29] - 2 * d[10] * d[22] * d[27] * d[29] + 2 * d[12] * d[23] * d[27] * d[29] - 2 * d[14] * d[18] * d[28] * d[29] + 2 * d[13] * d[21] * d[28] * d[29] + 2 * d[12] * d[22] * d[28] * d[29] - 2 * d[9] * d[23] * d[28] * d[29] + d[10] * d[18] * std::pow(d[29], 2) + d[9] * d[19] * std::pow(d[29], 2) - 2 * d[12] * d[21] * std::pow(d[29], 2) - d[2] * d[10] * d[18] * d[33] - d[1] * d[11] * d[18] * d[33] + 2 * d[5] * d[14] * d[18] * d[33] - d[2] * d[9] * d[19] * d[33] - d[0] * d[11] * d[19] * d[33] + 2 * d[4] * d[13] * d[19] * d[33] - d[1] * d[9] * d[20] * d[33] - d[0] * d[10] * d[20] * d[33] + 2 * d[3] * d[12] * d[20] * d[33] + 2 * d[3] * d[11] * d[21] * d[33] + 2 * d[2] * d[12] * d[21] * d[33] - 2 * d[5] * d[13] * d[21] * d[33] - 2 * d[4] * d[14] * d[21] * d[33] + 2 * d[4] * d[10] * d[22] * d[33] - 2 * d[5] * d[12] * d[22] * d[33] + 2 * d[1] * d[13] * d[22] * d[33] - 2 * d[3] * d[14] * d[22] * d[33] + 2 * d[5] * d[9] * d[23] * d[33] - 2 * d[4] * d[12] * d[23] * d[33] - 2 * d[3] * d[13] * d[23] * d[33] + 2 * d[0] * d[14] * d[23] * d[33];
	coeffs[6] = 2 * d[6] * d[19] * d[20] * d[27] - 2 * d[7] * d[20] * d[21] * d[27] - 2 * d[8] * d[19] * d[22] * d[27] + 2 * d[8] * d[21] * d[23] * d[27] + 2 * d[7] * d[22] * d[23] * d[27] - 2 * d[6] * std::pow(d[23], 2) * d[27] + 2 * d[2] * d[19] * d[24] * d[27] + 2 * d[1] * d[20] * d[24] * d[27] - 4 * d[5] * d[23] * d[24] * d[27] - 2 * d[3] * d[20] * d[25] * d[27] - 2 * d[2] * d[21] * d[25] * d[27] + 2 * d[5] * d[22] * d[25] * d[27] + 2 * d[4] * d[23] * d[25] * d[27] - 2 * d[4] * d[19] * d[26] * d[27] + 2 * d[5] * d[21] * d[26] * d[27] - 2 * d[1] * d[22] * d[26] * d[27] + 2 * d[3] * d[23] * d[26] * d[27] + d[19] * d[20] * std::pow(d[27], 2) - std::pow(d[23], 2) * std::pow(d[27], 2) + 2 * d[7] * d[18] * d[20] * d[28] - 2 * d[6] * d[20] * d[21] * d[28] + 2 * d[8] * d[21] * d[22] * d[28] - 2 * d[7] * std::pow(d[22], 2) * d[28] - 2 * d[8] * d[18] * d[23] * d[28] + 2 * d[6] * d[22] * d[23] * d[28] - 2 * d[3] * d[20] * d[24] * d[28] - 2 * d[2] * d[21] * d[24] * d[28] + 2 * d[5] * d[22] * d[24] * d[28] + 2 * d[4] * d[23] * d[24] * d[28] + 2 * d[2] * d[18] * d[25] * d[28] + 2 * d[0] * d[20] * d[25] * d[28] - 4 * d[4] * d[22] * d[25] * d[28] - 2 * d[5] * d[18] * d[26] * d[28] + 2 * d[4] * d[21] * d[26] * d[28] + 2 * d[3] * d[22] * d[26] * d[28] - 2 * d[0] * d[23] * d[26] * d[28] - 2 * d[20] * d[21] * d[27] * d[28] + 2 * d[22] * d[23] * d[27] * d[28] + d[18] * d[20] * std::pow(d[28], 2) - std::pow(d[22], 2) * std::pow(d[28], 2) + 2 * d[8] * d[18] * d[19] * d[29] - 2 * d[8] * std::pow(d[21], 2) * d[29] - 2 * d[6] * d[19] * d[22] * d[29] + 2 * d[7] * d[21] * d[22] * d[29] - 2 * d[7] * d[18] * d[23] * d[29] + 2 * d[6] * d[21] * d[23] * d[29] - 2 * d[4] * d[19] * d[24] * d[29] + 2 * d[5] * d[21] * d[24] * d[29] - 2 * d[1] * d[22] * d[24] * d[29] + 2 * d[3] * d[23] * d[24] * d[29] - 2 * d[5] * d[18] * d[25] * d[29] + 2 * d[4] * d[21] * d[25] * d[29] + 2 * d[3] * d[22] * d[25] * d[29] - 2 * d[0] * d[23] * d[25] * d[29] + 2 * d[1] * d[18] * d[26] * d[29] + 2 * d[0] * d[19] * d[26] * d[29] - 4 * d[3] * d[21] * d[26] * d[29] - 2 * d[19] * d[22] * d[27] * d[29] + 2 * d[21] * d[23] * d[27] * d[29] + 2 * d[21] * d[22] * d[28] * d[29] - 2 * d[18] * d[23] * d[28] * d[29] + d[18] * d[19] * std::pow(d[29], 2) - std::pow(d[21], 2) * std::pow(d[29], 2) - d[2] * d[18] * d[19] * d[33] - d[1] * d[18] * d[20] * d[33] - d[0] * d[19] * d[20] * d[33] + 2 * d[3] * d[20] * d[21] * d[33] + d[2] * std::pow(d[21], 2) * d[33] + 2 * d[4] * d[19] * d[22] * d[33] - 2 * d[5] * d[21] * d[22] * d[33] + d[1] * std::pow(d[22], 2) * d[33] + 2 * d[5] * d[18] * d[23] * d[33] - 2 * d[4] * d[21] * d[23] * d[33] - 2 * d[3] * d[22] * d[23] * d[33] + d[0] * std::pow(d[23], 2) * d[33];
	coeffs[7] = 2 * d[2] * d[6] * d[10] * d[27] - 2 * d[4] * d[8] * d[10] * d[27] + 2 * d[1] * d[6] * d[11] * d[27] - 2 * d[3] * d[7] * d[11] * d[27] - 2 * d[2] * d[7] * d[12] * d[27] + 2 * d[5] * d[8] * d[12] * d[27] + 2 * d[5] * d[7] * d[13] * d[27] - 2 * d[1] * d[8] * d[13] * d[27] - 4 * d[5] * d[6] * d[14] * d[27] + 2 * d[4] * d[7] * d[14] * d[27] + 2 * d[3] * d[8] * d[14] * d[27] + 2 * d[1] * d[2] * d[15] * d[27] - 2 * std::pow(d[5], 2) * d[15] * d[27] - 2 * d[2] * d[3] * d[16] * d[27] + 2 * d[4] * d[5] * d[16] * d[27] - 2 * d[1] * d[4] * d[17] * d[27] + 2 * d[3] * d[5] * d[17] * d[27] + d[2] * d[10] * std::pow(d[27], 2) + d[1] * d[11] * std::pow(d[27], 2) - 2 * d[5] * d[14] * std::pow(d[27], 2) + 2 * d[2] * d[7] * d[9] * d[28] - 2 * d[5] * d[8] * d[9] * d[28] - 2 * d[3] * d[6] * d[11] * d[28] + 2 * d[0] * d[7] * d[11] * d[28] - 2 * d[2] * d[6] * d[12] * d[28] + 2 * d[4] * d[8] * d[12] * d[28] + 2 * d[5] * d[6] * d[13] * d[28] - 4 * d[4] * d[7] * d[13] * d[28] + 2 * d[3] * d[8] * d[13] * d[28] + 2 * d[4] * d[6] * d[14] * d[28] - 2 * d[0] * d[8] * d[14] * d[28] - 2 * d[2] * d[3] * d[15] * d[28] + 2 * d[4] * d[5] * d[15] * d[28] + 2 * d[0] * d[2] * d[16] * d[28] - 2 * std::pow(d[4], 2) * d[16] * d[28] + 2 * d[3] * d[4] * d[17] * d[28] - 2 * d[0] * d[5] * d[17] * d[28] - 2 * d[3] * d[11] * d[27] * d[28] - 2 * d[2] * d[12] * d[27] * d[28] + 2 * d[5] * d[13] * d[27] * d[28] + 2 * d[4] * d[14] * d[27] * d[28] + d[2] * d[9] * std::pow(d[28], 2) + d[0] * d[11] * std::pow(d[28], 2) - 2 * d[4] * d[13] * std::pow(d[28], 2) - 2 * d[5] * d[7] * d[9] * d[29] + 2 * d[1] * d[8] * d[9] * d[29] - 2 * d[4] * d[6] * d[10] * d[29] + 2 * d[0] * d[8] * d[10] * d[29] + 2 * d[5] * d[6] * d[12] * d[29] + 2 * d[4] * d[7] * d[12] * d[29] - 4 * d[3] * d[8] * d[12] * d[29] - 2 * d[1] * d[6] * d[13] * d[29] + 2 * d[3] * d[7] * d[13] * d[29] + 2 * d[3] * d[6] * d[14] * d[29] - 2 * d[0] * d[7] * d[14] * d[29] - 2 * d[1] * d[4] * d[15] * d[29] + 2 * d[3] * d[5] * d[15] * d[29] + 2 * d[3] * d[4] * d[16] * d[29] - 2 * d[0] * d[5] * d[16] * d[29] + 2 * d[0] * d[1] * d[17] * d[29] - 2 * std::pow(d[3], 2) * d[17] * d[29] - 2 * d[4] * d[10] * d[27] * d[29] + 2 * d[5] * d[12] * d[27] * d[29] - 2 * d[1] * d[13] * d[27] * d[29] + 2 * d[3] * d[14] * d[27] * d[29] - 2 * d[5] * d[9] * d[28] * d[29] + 2 * d[4] * d[12] * d[28] * d[29] + 2 * d[3] * d[13] * d[28] * d[29] - 2 * d[0] * d[14] * d[28] * d[29] + d[1] * d[9] * std::pow(d[29], 2) + d[0] * d[10] * std::pow(d[29], 2) - 2 * d[3] * d[12] * std::pow(d[29], 2) - d[1] * d[2] * d[9] * d[33] + std::pow(d[5], 2) * d[9] * d[33] - d[0] * d[2] * d[10] * d[33] + std::pow(d[4], 2) * d[10] * d[33] - d[0] * d[1] * d[11] * d[33] + std::pow(d[3], 2) * d[11] * d[33] + 2 * d[2] * d[3] * d[12] * d[33] - 2 * d[4] * d[5] * d[12] * d[33] + 2 * d[1] * d[4] * d[13] * d[33] - 2 * d[3] * d[5] * d[13] * d[33] - 2 * d[3] * d[4] * d[14] * d[33] + 2 * d[0] * d[5] * d[14] * d[33];
	coeffs[8] = 2 * d[2] * d[6] * d[19] * d[27] - 2 * d[4] * d[8] * d[19] * d[27] + 2 * d[1] * d[6] * d[20] * d[27] - 2 * d[3] * d[7] * d[20] * d[27] - 2 * d[2] * d[7] * d[21] * d[27] + 2 * d[5] * d[8] * d[21] * d[27] + 2 * d[5] * d[7] * d[22] * d[27] - 2 * d[1] * d[8] * d[22] * d[27] - 4 * d[5] * d[6] * d[23] * d[27] + 2 * d[4] * d[7] * d[23] * d[27] + 2 * d[3] * d[8] * d[23] * d[27] + 2 * d[1] * d[2] * d[24] * d[27] - 2 * std::pow(d[5], 2) * d[24] * d[27] - 2 * d[2] * d[3] * d[25] * d[27] + 2 * d[4] * d[5] * d[25] * d[27] - 2 * d[1] * d[4] * d[26] * d[27] + 2 * d[3] * d[5] * d[26] * d[27] + d[2] * d[19] * std::pow(d[27], 2) + d[1] * d[20] * std::pow(d[27], 2) - 2 * d[5] * d[23] * std::pow(d[27], 2) + 2 * d[2] * d[7] * d[18] * d[28] - 2 * d[5] * d[8] * d[18] * d[28] - 2 * d[3] * d[6] * d[20] * d[28] + 2 * d[0] * d[7] * d[20] * d[28] - 2 * d[2] * d[6] * d[21] * d[28] + 2 * d[4] * d[8] * d[21] * d[28] + 2 * d[5] * d[6] * d[22] * d[28] - 4 * d[4] * d[7] * d[22] * d[28] + 2 * d[3] * d[8] * d[22] * d[28] + 2 * d[4] * d[6] * d[23] * d[28] - 2 * d[0] * d[8] * d[23] * d[28] - 2 * d[2] * d[3] * d[24] * d[28] + 2 * d[4] * d[5] * d[24] * d[28] + 2 * d[0] * d[2] * d[25] * d[28] - 2 * std::pow(d[4], 2) * d[25] * d[28] + 2 * d[3] * d[4] * d[26] * d[28] - 2 * d[0] * d[5] * d[26] * d[28] - 2 * d[3] * d[20] * d[27] * d[28] - 2 * d[2] * d[21] * d[27] * d[28] + 2 * d[5] * d[22] * d[27] * d[28] + 2 * d[4] * d[23] * d[27] * d[28] + d[2] * d[18] * std::pow(d[28], 2) + d[0] * d[20] * std::pow(d[28], 2) - 2 * d[4] * d[22] * std::pow(d[28], 2) - 2 * d[5] * d[7] * d[18] * d[29] + 2 * d[1] * d[8] * d[18] * d[29] - 2 * d[4] * d[6] * d[19] * d[29] + 2 * d[0] * d[8] * d[19] * d[29] + 2 * d[5] * d[6] * d[21] * d[29] + 2 * d[4] * d[7] * d[21] * d[29] - 4 * d[3] * d[8] * d[21] * d[29] - 2 * d[1] * d[6] * d[22] * d[29] + 2 * d[3] * d[7] * d[22] * d[29] + 2 * d[3] * d[6] * d[23] * d[29] - 2 * d[0] * d[7] * d[23] * d[29] - 2 * d[1] * d[4] * d[24] * d[29] + 2 * d[3] * d[5] * d[24] * d[29] + 2 * d[3] * d[4] * d[25] * d[29] - 2 * d[0] * d[5] * d[25] * d[29] + 2 * d[0] * d[1] * d[26] * d[29] - 2 * std::pow(d[3], 2) * d[26] * d[29] - 2 * d[4] * d[19] * d[27] * d[29] + 2 * d[5] * d[21] * d[27] * d[29] - 2 * d[1] * d[22] * d[27] * d[29] + 2 * d[3] * d[23] * d[27] * d[29] - 2 * d[5] * d[18] * d[28] * d[29] + 2 * d[4] * d[21] * d[28] * d[29] + 2 * d[3] * d[22] * d[28] * d[29] - 2 * d[0] * d[23] * d[28] * d[29] + d[1] * d[18] * std::pow(d[29], 2) + d[0] * d[19] * std::pow(d[29], 2) - 2 * d[3] * d[21] * std::pow(d[29], 2) - d[1] * d[2] * d[18] * d[33] + std::pow(d[5], 2) * d[18] * d[33] - d[0] * d[2] * d[19] * d[33] + std::pow(d[4], 2) * d[19] * d[33] - d[0] * d[1] * d[20] * d[33] + std::pow(d[3], 2) * d[20] * d[33] + 2 * d[2] * d[3] * d[21] * d[33] - 2 * d[4] * d[5] * d[21] * d[33] + 2 * d[1] * d[4] * d[22] * d[33] - 2 * d[3] * d[5] * d[22] * d[33] - 2 * d[3] * d[4] * d[23] * d[33] + 2 * d[0] * d[5] * d[23] * d[33];
	coeffs[9] = 2 * d[1] * d[2] * d[6] * d[27] - 2 * std::pow(d[5], 2) * d[6] * d[27] - 2 * d[2] * d[3] * d[7] * d[27] + 2 * d[4] * d[5] * d[7] * d[27] - 2 * d[1] * d[4] * d[8] * d[27] + 2 * d[3] * d[5] * d[8] * d[27] + d[1] * d[2] * std::pow(d[27], 2) - std::pow(d[5], 2) * std::pow(d[27], 2) - 2 * d[2] * d[3] * d[6] * d[28] + 2 * d[4] * d[5] * d[6] * d[28] + 2 * d[0] * d[2] * d[7] * d[28] - 2 * std::pow(d[4], 2) * d[7] * d[28] + 2 * d[3] * d[4] * d[8] * d[28] - 2 * d[0] * d[5] * d[8] * d[28] - 2 * d[2] * d[3] * d[27] * d[28] + 2 * d[4] * d[5] * d[27] * d[28] + d[0] * d[2] * std::pow(d[28], 2) - std::pow(d[4], 2) * std::pow(d[28], 2) - 2 * d[1] * d[4] * d[6] * d[29] + 2 * d[3] * d[5] * d[6] * d[29] + 2 * d[3] * d[4] * d[7] * d[29] - 2 * d[0] * d[5] * d[7] * d[29] + 2 * d[0] * d[1] * d[8] * d[29] - 2 * std::pow(d[3], 2) * d[8] * d[29] - 2 * d[1] * d[4] * d[27] * d[29] + 2 * d[3] * d[5] * d[27] * d[29] + 2 * d[3] * d[4] * d[28] * d[29] - 2 * d[0] * d[5] * d[28] * d[29] + d[0] * d[1] * std::pow(d[29], 2) - std::pow(d[3], 2) * std::pow(d[29], 2) - d[0] * d[1] * d[2] * d[33] + d[2] * std::pow(d[3], 2) * d[33] + d[1] * std::pow(d[4], 2) * d[33] - 2 * d[3] * d[4] * d[5] * d[33] + d[0] * std::pow(d[5], 2) * d[33];
	coeffs[10] = 2 * d[10] * d[11] * d[15] * d[30] - 2 * std::pow(d[14], 2) * d[15] * d[30] - 2 * d[11] * d[12] * d[16] * d[30] + 2 * d[13] * d[14] * d[16] * d[30] - 2 * d[10] * d[13] * d[17] * d[30] + 2 * d[12] * d[14] * d[17] * d[30] - 2 * d[11] * d[12] * d[15] * d[31] + 2 * d[13] * d[14] * d[15] * d[31] + 2 * d[9] * d[11] * d[16] * d[31] - 2 * std::pow(d[13], 2) * d[16] * d[31] + 2 * d[12] * d[13] * d[17] * d[31] - 2 * d[9] * d[14] * d[17] * d[31] - 2 * d[10] * d[13] * d[15] * d[32] + 2 * d[12] * d[14] * d[15] * d[32] + 2 * d[12] * d[13] * d[16] * d[32] - 2 * d[9] * d[14] * d[16] * d[32] + 2 * d[9] * d[10] * d[17] * d[32] - 2 * std::pow(d[12], 2) * d[17] * d[32] - d[9] * d[10] * d[11] * d[34] + d[11] * std::pow(d[12], 2) * d[34] + d[10] * std::pow(d[13], 2) * d[34] - 2 * d[12] * d[13] * d[14] * d[34] + d[9] * std::pow(d[14], 2) * d[34];
	coeffs[11] = 2 * d[11] * d[15] * d[19] * d[30] - 2 * d[13] * d[17] * d[19] * d[30] + 2 * d[10] * d[15] * d[20] * d[30] - 2 * d[12] * d[16] * d[20] * d[30] - 2 * d[11] * d[16] * d[21] * d[30] + 2 * d[14] * d[17] * d[21] * d[30] + 2 * d[14] * d[16] * d[22] * d[30] - 2 * d[10] * d[17] * d[22] * d[30] - 4 * d[14] * d[15] * d[23] * d[30] + 2 * d[13] * d[16] * d[23] * d[30] + 2 * d[12] * d[17] * d[23] * d[30] + 2 * d[10] * d[11] * d[24] * d[30] - 2 * std::pow(d[14], 2) * d[24] * d[30] - 2 * d[11] * d[12] * d[25] * d[30] + 2 * d[13] * d[14] * d[25] * d[30] - 2 * d[10] * d[13] * d[26] * d[30] + 2 * d[12] * d[14] * d[26] * d[30] + 2 * d[11] * d[16] * d[18] * d[31] - 2 * d[14] * d[17] * d[18] * d[31] - 2 * d[12] * d[15] * d[20] * d[31] + 2 * d[9] * d[16] * d[20] * d[31] - 2 * d[11] * d[15] * d[21] * d[31] + 2 * d[13] * d[17] * d[21] * d[31] + 2 * d[14] * d[15] * d[22] * d[31] - 4 * d[13] * d[16] * d[22] * d[31] + 2 * d[12] * d[17] * d[22] * d[31] + 2 * d[13] * d[15] * d[23] * d[31] - 2 * d[9] * d[17] * d[23] * d[31] - 2 * d[11] * d[12] * d[24] * d[31] + 2 * d[13] * d[14] * d[24] * d[31] + 2 * d[9] * d[11] * d[25] * d[31] - 2 * std::pow(d[13], 2) * d[25] * d[31] + 2 * d[12] * d[13] * d[26] * d[31] - 2 * d[9] * d[14] * d[26] * d[31] - 2 * d[14] * d[16] * d[18] * d[32] + 2 * d[10] * d[17] * d[18] * d[32] - 2 * d[13] * d[15] * d[19] * d[32] + 2 * d[9] * d[17] * d[19] * d[32] + 2 * d[14] * d[15] * d[21] * d[32] + 2 * d[13] * d[16] * d[21] * d[32] - 4 * d[12] * d[17] * d[21] * d[32] - 2 * d[10] * d[15] * d[22] * d[32] + 2 * d[12] * d[16] * d[22] * d[32] + 2 * d[12] * d[15] * d[23] * d[32] - 2 * d[9] * d[16] * d[23] * d[32] - 2 * d[10] * d[13] * d[24] * d[32] + 2 * d[12] * d[14] * d[24] * d[32] + 2 * d[12] * d[13] * d[25] * d[32] - 2 * d[9] * d[14] * d[25] * d[32] + 2 * d[9] * d[10] * d[26] * d[32] - 2 * std::pow(d[12], 2) * d[26] * d[32] - d[10] * d[11] * d[18] * d[34] + std::pow(d[14], 2) * d[18] * d[34] - d[9] * d[11] * d[19] * d[34] + std::pow(d[13], 2) * d[19] * d[34] - d[9] * d[10] * d[20] * d[34] + std::pow(d[12], 2) * d[20] * d[34] + 2 * d[11] * d[12] * d[21] * d[34] - 2 * d[13] * d[14] * d[21] * d[34] + 2 * d[10] * d[13] * d[22] * d[34] - 2 * d[12] * d[14] * d[22] * d[34] - 2 * d[12] * d[13] * d[23] * d[34] + 2 * d[9] * d[14] * d[23] * d[34];
	coeffs[12] = 2 * d[15] * d[19] * d[20] * d[30] - 2 * d[16] * d[20] * d[21] * d[30] - 2 * d[17] * d[19] * d[22] * d[30] + 2 * d[17] * d[21] * d[23] * d[30] + 2 * d[16] * d[22] * d[23] * d[30] - 2 * d[15] * std::pow(d[23], 2) * d[30] + 2 * d[11] * d[19] * d[24] * d[30] + 2 * d[10] * d[20] * d[24] * d[30] - 4 * d[14] * d[23] * d[24] * d[30] - 2 * d[12] * d[20] * d[25] * d[30] - 2 * d[11] * d[21] * d[25] * d[30] + 2 * d[14] * d[22] * d[25] * d[30] + 2 * d[13] * d[23] * d[25] * d[30] - 2 * d[13] * d[19] * d[26] * d[30] + 2 * d[14] * d[21] * d[26] * d[30] - 2 * d[10] * d[22] * d[26] * d[30] + 2 * d[12] * d[23] * d[26] * d[30] + 2 * d[16] * d[18] * d[20] * d[31] - 2 * d[15] * d[20] * d[21] * d[31] + 2 * d[17] * d[21] * d[22] * d[31] - 2 * d[16] * std::pow(d[22], 2) * d[31] - 2 * d[17] * d[18] * d[23] * d[31] + 2 * d[15] * d[22] * d[23] * d[31] - 2 * d[12] * d[20] * d[24] * d[31] - 2 * d[11] * d[21] * d[24] * d[31] + 2 * d[14] * d[22] * d[24] * d[31] + 2 * d[13] * d[23] * d[24] * d[31] + 2 * d[11] * d[18] * d[25] * d[31] + 2 * d[9] * d[20] * d[25] * d[31] - 4 * d[13] * d[22] * d[25] * d[31] - 2 * d[14] * d[18] * d[26] * d[31] + 2 * d[13] * d[21] * d[26] * d[31] + 2 * d[12] * d[22] * d[26] * d[31] - 2 * d[9] * d[23] * d[26] * d[31] + 2 * d[17] * d[18] * d[19] * d[32] - 2 * d[17] * std::pow(d[21], 2) * d[32] - 2 * d[15] * d[19] * d[22] * d[32] + 2 * d[16] * d[21] * d[22] * d[32] - 2 * d[16] * d[18] * d[23] * d[32] + 2 * d[15] * d[21] * d[23] * d[32] - 2 * d[13] * d[19] * d[24] * d[32] + 2 * d[14] * d[21] * d[24] * d[32] - 2 * d[10] * d[22] * d[24] * d[32] + 2 * d[12] * d[23] * d[24] * d[32] - 2 * d[14] * d[18] * d[25] * d[32] + 2 * d[13] * d[21] * d[25] * d[32] + 2 * d[12] * d[22] * d[25] * d[32] - 2 * d[9] * d[23] * d[25] * d[32] + 2 * d[10] * d[18] * d[26] * d[32] + 2 * d[9] * d[19] * d[26] * d[32] - 4 * d[12] * d[21] * d[26] * d[32] - d[11] * d[18] * d[19] * d[34] - d[10] * d[18] * d[20] * d[34] - d[9] * d[19] * d[20] * d[34] + 2 * d[12] * d[20] * d[21] * d[34] + d[11] * std::pow(d[21], 2) * d[34] + 2 * d[13] * d[19] * d[22] * d[34] - 2 * d[14] * d[21] * d[22] * d[34] + d[10] * std::pow(d[22], 2) * d[34] + 2 * d[14] * d[18] * d[23] * d[34] - 2 * d[13] * d[21] * d[23] * d[34] - 2 * d[12] * d[22] * d[23] * d[34] + d[9] * std::pow(d[23], 2) * d[34];
	coeffs[13] = 2 * d[19] * d[20] * d[24] * d[30] - 2 * std::pow(d[23], 2) * d[24] * d[30] - 2 * d[20] * d[21] * d[25] * d[30] + 2 * d[22] * d[23] * d[25] * d[30] - 2 * d[19] * d[22] * d[26] * d[30] + 2 * d[21] * d[23] * d[26] * d[30] - 2 * d[20] * d[21] * d[24] * d[31] + 2 * d[22] * d[23] * d[24] * d[31] + 2 * d[18] * d[20] * d[25] * d[31] - 2 * std::pow(d[22], 2) * d[25] * d[31] + 2 * d[21] * d[22] * d[26] * d[31] - 2 * d[18] * d[23] * d[26] * d[31] - 2 * d[19] * d[22] * d[24] * d[32] + 2 * d[21] * d[23] * d[24] * d[32] + 2 * d[21] * d[22] * d[25] * d[32] - 2 * d[18] * d[23] * d[25] * d[32] + 2 * d[18] * d[19] * d[26] * d[32] - 2 * std::pow(d[21], 2) * d[26] * d[32] - d[18] * d[19] * d[20] * d[34] + d[20] * std::pow(d[21], 2) * d[34] + d[19] * std::pow(d[22], 2) * d[34] - 2 * d[21] * d[22] * d[23] * d[34] + d[18] * std::pow(d[23], 2) * d[34];
	coeffs[14] = 2 * d[6] * d[10] * d[11] * d[30] - 2 * d[7] * d[11] * d[12] * d[30] - 2 * d[8] * d[10] * d[13] * d[30] + 2 * d[8] * d[12] * d[14] * d[30] + 2 * d[7] * d[13] * d[14] * d[30] - 2 * d[6] * std::pow(d[14], 2) * d[30] + 2 * d[2] * d[10] * d[15] * d[30] + 2 * d[1] * d[11] * d[15] * d[30] - 4 * d[5] * d[14] * d[15] * d[30] - 2 * d[3] * d[11] * d[16] * d[30] - 2 * d[2] * d[12] * d[16] * d[30] + 2 * d[5] * d[13] * d[16] * d[30] + 2 * d[4] * d[14] * d[16] * d[30] - 2 * d[4] * d[10] * d[17] * d[30] + 2 * d[5] * d[12] * d[17] * d[30] - 2 * d[1] * d[13] * d[17] * d[30] + 2 * d[3] * d[14] * d[17] * d[30] + d[10] * d[11] * std::pow(d[30], 2) - std::pow(d[14], 2) * std::pow(d[30], 2) + 2 * d[7] * d[9] * d[11] * d[31] - 2 * d[6] * d[11] * d[12] * d[31] + 2 * d[8] * d[12] * d[13] * d[31] - 2 * d[7] * std::pow(d[13], 2) * d[31] - 2 * d[8] * d[9] * d[14] * d[31] + 2 * d[6] * d[13] * d[14] * d[31] - 2 * d[3] * d[11] * d[15] * d[31] - 2 * d[2] * d[12] * d[15] * d[31] + 2 * d[5] * d[13] * d[15] * d[31] + 2 * d[4] * d[14] * d[15] * d[31] + 2 * d[2] * d[9] * d[16] * d[31] + 2 * d[0] * d[11] * d[16] * d[31] - 4 * d[4] * d[13] * d[16] * d[31] - 2 * d[5] * d[9] * d[17] * d[31] + 2 * d[4] * d[12] * d[17] * d[31] + 2 * d[3] * d[13] * d[17] * d[31] - 2 * d[0] * d[14] * d[17] * d[31] - 2 * d[11] * d[12] * d[30] * d[31] + 2 * d[13] * d[14] * d[30] * d[31] + d[9] * d[11] * std::pow(d[31], 2) - std::pow(d[13], 2) * std::pow(d[31], 2) + 2 * d[8] * d[9] * d[10] * d[32] - 2 * d[8] * std::pow(d[12], 2) * d[32] - 2 * d[6] * d[10] * d[13] * d[32] + 2 * d[7] * d[12] * d[13] * d[32] - 2 * d[7] * d[9] * d[14] * d[32] + 2 * d[6] * d[12] * d[14] * d[32] - 2 * d[4] * d[10] * d[15] * d[32] + 2 * d[5] * d[12] * d[15] * d[32] - 2 * d[1] * d[13] * d[15] * d[32] + 2 * d[3] * d[14] * d[15] * d[32] - 2 * d[5] * d[9] * d[16] * d[32] + 2 * d[4] * d[12] * d[16] * d[32] + 2 * d[3] * d[13] * d[16] * d[32] - 2 * d[0] * d[14] * d[16] * d[32] + 2 * d[1] * d[9] * d[17] * d[32] + 2 * d[0] * d[10] * d[17] * d[32] - 4 * d[3] * d[12] * d[17] * d[32] - 2 * d[10] * d[13] * d[30] * d[32] + 2 * d[12] * d[14] * d[30] * d[32] + 2 * d[12] * d[13] * d[31] * d[32] - 2 * d[9] * d[14] * d[31] * d[32] + d[9] * d[10] * std::pow(d[32], 2) - std::pow(d[12], 2) * std::pow(d[32], 2) - d[2] * d[9] * d[10] * d[34] - d[1] * d[9] * d[11] * d[34] - d[0] * d[10] * d[11] * d[34] + 2 * d[3] * d[11] * d[12] * d[34] + d[2] * std::pow(d[12], 2) * d[34] + 2 * d[4] * d[10] * d[13] * d[34] - 2 * d[5] * d[12] * d[13] * d[34] + d[1] * std::pow(d[13], 2) * d[34] + 2 * d[5] * d[9] * d[14] * d[34] - 2 * d[4] * d[12] * d[14] * d[34] - 2 * d[3] * d[13] * d[14] * d[34] + d[0] * std::pow(d[14], 2) * d[34];
	coeffs[15] = 2 * d[6] * d[11] * d[19] * d[30] - 2 * d[8] * d[13] * d[19] * d[30] + 2 * d[2] * d[15] * d[19] * d[30] - 2 * d[4] * d[17] * d[19] * d[30] + 2 * d[6] * d[10] * d[20] * d[30] - 2 * d[7] * d[12] * d[20] * d[30] + 2 * d[1] * d[15] * d[20] * d[30] - 2 * d[3] * d[16] * d[20] * d[30] - 2 * d[7] * d[11] * d[21] * d[30] + 2 * d[8] * d[14] * d[21] * d[30] - 2 * d[2] * d[16] * d[21] * d[30] + 2 * d[5] * d[17] * d[21] * d[30] - 2 * d[8] * d[10] * d[22] * d[30] + 2 * d[7] * d[14] * d[22] * d[30] + 2 * d[5] * d[16] * d[22] * d[30] - 2 * d[1] * d[17] * d[22] * d[30] + 2 * d[8] * d[12] * d[23] * d[30] + 2 * d[7] * d[13] * d[23] * d[30] - 4 * d[6] * d[14] * d[23] * d[30] - 4 * d[5] * d[15] * d[23] * d[30] + 2 * d[4] * d[16] * d[23] * d[30] + 2 * d[3] * d[17] * d[23] * d[30] + 2 * d[2] * d[10] * d[24] * d[30] + 2 * d[1] * d[11] * d[24] * d[30] - 4 * d[5] * d[14] * d[24] * d[30] - 2 * d[3] * d[11] * d[25] * d[30] - 2 * d[2] * d[12] * d[25] * d[30] + 2 * d[5] * d[13] * d[25] * d[30] + 2 * d[4] * d[14] * d[25] * d[30] - 2 * d[4] * d[10] * d[26] * d[30] + 2 * d[5] * d[12] * d[26] * d[30] - 2 * d[1] * d[13] * d[26] * d[30] + 2 * d[3] * d[14] * d[26] * d[30] + d[11] * d[19] * std::pow(d[30], 2) + d[10] * d[20] * std::pow(d[30], 2) - 2 * d[14] * d[23] * std::pow(d[30], 2) + 2 * d[7] * d[11] * d[18] * d[31] - 2 * d[8] * d[14] * d[18] * d[31] + 2 * d[2] * d[16] * d[18] * d[31] - 2 * d[5] * d[17] * d[18] * d[31] + 2 * d[7] * d[9] * d[20] * d[31] - 2 * d[6] * d[12] * d[20] * d[31] - 2 * d[3] * d[15] * d[20] * d[31] + 2 * d[0] * d[16] * d[20] * d[31] - 2 * d[6] * d[11] * d[21] * d[31] + 2 * d[8] * d[13] * d[21] * d[31] - 2 * d[2] * d[15] * d[21] * d[31] + 2 * d[4] * d[17] * d[21] * d[31] + 2 * d[8] * d[12] * d[22] * d[31] - 4 * d[7] * d[13] * d[22] * d[31] + 2 * d[6] * d[14] * d[22] * d[31] + 2 * d[5] * d[15] * d[22] * d[31] - 4 * d[4] * d[16] * d[22] * d[31] + 2 * d[3] * d[17] * d[22] * d[31] - 2 * d[8] * d[9] * d[23] * d[31] + 2 * d[6] * d[13] * d[23] * d[31] + 2 * d[4] * d[15] * d[23] * d[31] - 2 * d[0] * d[17] * d[23] * d[31] - 2 * d[3] * d[11] * d[24] * d[31] - 2 * d[2] * d[12] * d[24] * d[31] + 2 * d[5] * d[13] * d[24] * d[31] + 2 * d[4] * d[14] * d[24] * d[31] + 2 * d[2] * d[9] * d[25] * d[31] + 2 * d[0] * d[11] * d[25] * d[31] - 4 * d[4] * d[13] * d[25] * d[31] - 2 * d[5] * d[9] * d[26] * d[31] + 2 * d[4] * d[12] * d[26] * d[31] + 2 * d[3] * d[13] * d[26] * d[31] - 2 * d[0] * d[14] * d[26] * d[31] - 2 * d[12] * d[20] * d[30] * d[31] - 2 * d[11] * d[21] * d[30] * d[31] + 2 * d[14] * d[22] * d[30] * d[31] + 2 * d[13] * d[23] * d[30] * d[31] + d[11] * d[18] * std::pow(d[31], 2) + d[9] * d[20] * std::pow(d[31], 2) - 2 * d[13] * d[22] * std::pow(d[31], 2) + 2 * d[8] * d[10] * d[18] * d[32] - 2 * d[7] * d[14] * d[18] * d[32] - 2 * d[5] * d[16] * d[18] * d[32] + 2 * d[1] * d[17] * d[18] * d[32] + 2 * d[8] * d[9] * d[19] * d[32] - 2 * d[6] * d[13] * d[19] * d[32] - 2 * d[4] * d[15] * d[19] * d[32] + 2 * d[0] * d[17] * d[19] * d[32] - 4 * d[8] * d[12] * d[21] * d[32] + 2 * d[7] * d[13] * d[21] * d[32] + 2 * d[6] * d[14] * d[21] * d[32] + 2 * d[5] * d[15] * d[21] * d[32] + 2 * d[4] * d[16] * d[21] * d[32] - 4 * d[3] * d[17] * d[21] * d[32] - 2 * d[6] * d[10] * d[22] * d[32] + 2 * d[7] * d[12] * d[22] * d[32] - 2 * d[1] * d[15] * d[22] * d[32] + 2 * d[3] * d[16] * d[22] * d[32] - 2 * d[7] * d[9] * d[23] * d[32] + 2 * d[6] * d[12] * d[23] * d[32] + 2 * d[3] * d[15] * d[23] * d[32] - 2 * d[0] * d[16] * d[23] * d[32] - 2 * d[4] * d[10] * d[24] * d[32] + 2 * d[5] * d[12] * d[24] * d[32] - 2 * d[1] * d[13] * d[24] * d[32] + 2 * d[3] * d[14] * d[24] * d[32] - 2 * d[5] * d[9] * d[25] * d[32] + 2 * d[4] * d[12] * d[25] * d[32] + 2 * d[3] * d[13] * d[25] * d[32] - 2 * d[0] * d[14] * d[25] * d[32] + 2 * d[1] * d[9] * d[26] * d[32] + 2 * d[0] * d[10] * d[26] * d[32] - 4 * d[3] * d[12] * d[26] * d[32] - 2 * d[13] * d[19] * d[30] * d[32] + 2 * d[14] * d[21] * d[30] * d[32] - 2 * d[10] * d[22] * d[30] * d[32] + 2 * d[12] * d[23] * d[30] * d[32] - 2 * d[14] * d[18] * d[31] * d[32] + 2 * d[13] * d[21] * d[31] * d[32] + 2 * d[12] * d[22] * d[31] * d[32] - 2 * d[9] * d[23] * d[31] * d[32] + d[10] * d[18] * std::pow(d[32], 2) + d[9] * d[19] * std::pow(d[32], 2) - 2 * d[12] * d[21] * std::pow(d[32], 2) - d[2] * d[10] * d[18] * d[34] - d[1] * d[11] * d[18] * d[34] + 2 * d[5] * d[14] * d[18] * d[34] - d[2] * d[9] * d[19] * d[34] - d[0] * d[11] * d[19] * d[34] + 2 * d[4] * d[13] * d[19] * d[34] - d[1] * d[9] * d[20] * d[34] - d[0] * d[10] * d[20] * d[34] + 2 * d[3] * d[12] * d[20] * d[34] + 2 * d[3] * d[11] * d[21] * d[34] + 2 * d[2] * d[12] * d[21] * d[34] - 2 * d[5] * d[13] * d[21] * d[34] - 2 * d[4] * d[14] * d[21] * d[34] + 2 * d[4] * d[10] * d[22] * d[34] - 2 * d[5] * d[12] * d[22] * d[34] + 2 * d[1] * d[13] * d[22] * d[34] - 2 * d[3] * d[14] * d[22] * d[34] + 2 * d[5] * d[9] * d[23] * d[34] - 2 * d[4] * d[12] * d[23] * d[34] - 2 * d[3] * d[13] * d[23] * d[34] + 2 * d[0] * d[14] * d[23] * d[34];
	coeffs[16] = 2 * d[6] * d[19] * d[20] * d[30] - 2 * d[7] * d[20] * d[21] * d[30] - 2 * d[8] * d[19] * d[22] * d[30] + 2 * d[8] * d[21] * d[23] * d[30] + 2 * d[7] * d[22] * d[23] * d[30] - 2 * d[6] * std::pow(d[23], 2) * d[30] + 2 * d[2] * d[19] * d[24] * d[30] + 2 * d[1] * d[20] * d[24] * d[30] - 4 * d[5] * d[23] * d[24] * d[30] - 2 * d[3] * d[20] * d[25] * d[30] - 2 * d[2] * d[21] * d[25] * d[30] + 2 * d[5] * d[22] * d[25] * d[30] + 2 * d[4] * d[23] * d[25] * d[30] - 2 * d[4] * d[19] * d[26] * d[30] + 2 * d[5] * d[21] * d[26] * d[30] - 2 * d[1] * d[22] * d[26] * d[30] + 2 * d[3] * d[23] * d[26] * d[30] + d[19] * d[20] * std::pow(d[30], 2) - std::pow(d[23], 2) * std::pow(d[30], 2) + 2 * d[7] * d[18] * d[20] * d[31] - 2 * d[6] * d[20] * d[21] * d[31] + 2 * d[8] * d[21] * d[22] * d[31] - 2 * d[7] * std::pow(d[22], 2) * d[31] - 2 * d[8] * d[18] * d[23] * d[31] + 2 * d[6] * d[22] * d[23] * d[31] - 2 * d[3] * d[20] * d[24] * d[31] - 2 * d[2] * d[21] * d[24] * d[31] + 2 * d[5] * d[22] * d[24] * d[31] + 2 * d[4] * d[23] * d[24] * d[31] + 2 * d[2] * d[18] * d[25] * d[31] + 2 * d[0] * d[20] * d[25] * d[31] - 4 * d[4] * d[22] * d[25] * d[31] - 2 * d[5] * d[18] * d[26] * d[31] + 2 * d[4] * d[21] * d[26] * d[31] + 2 * d[3] * d[22] * d[26] * d[31] - 2 * d[0] * d[23] * d[26] * d[31] - 2 * d[20] * d[21] * d[30] * d[31] + 2 * d[22] * d[23] * d[30] * d[31] + d[18] * d[20] * std::pow(d[31], 2) - std::pow(d[22], 2) * std::pow(d[31], 2) + 2 * d[8] * d[18] * d[19] * d[32] - 2 * d[8] * std::pow(d[21], 2) * d[32] - 2 * d[6] * d[19] * d[22] * d[32] + 2 * d[7] * d[21] * d[22] * d[32] - 2 * d[7] * d[18] * d[23] * d[32] + 2 * d[6] * d[21] * d[23] * d[32] - 2 * d[4] * d[19] * d[24] * d[32] + 2 * d[5] * d[21] * d[24] * d[32] - 2 * d[1] * d[22] * d[24] * d[32] + 2 * d[3] * d[23] * d[24] * d[32] - 2 * d[5] * d[18] * d[25] * d[32] + 2 * d[4] * d[21] * d[25] * d[32] + 2 * d[3] * d[22] * d[25] * d[32] - 2 * d[0] * d[23] * d[25] * d[32] + 2 * d[1] * d[18] * d[26] * d[32] + 2 * d[0] * d[19] * d[26] * d[32] - 4 * d[3] * d[21] * d[26] * d[32] - 2 * d[19] * d[22] * d[30] * d[32] + 2 * d[21] * d[23] * d[30] * d[32] + 2 * d[21] * d[22] * d[31] * d[32] - 2 * d[18] * d[23] * d[31] * d[32] + d[18] * d[19] * std::pow(d[32], 2) - std::pow(d[21], 2) * std::pow(d[32], 2) - d[2] * d[18] * d[19] * d[34] - d[1] * d[18] * d[20] * d[34] - d[0] * d[19] * d[20] * d[34] + 2 * d[3] * d[20] * d[21] * d[34] + d[2] * std::pow(d[21], 2) * d[34] + 2 * d[4] * d[19] * d[22] * d[34] - 2 * d[5] * d[21] * d[22] * d[34] + d[1] * std::pow(d[22], 2) * d[34] + 2 * d[5] * d[18] * d[23] * d[34] - 2 * d[4] * d[21] * d[23] * d[34] - 2 * d[3] * d[22] * d[23] * d[34] + d[0] * std::pow(d[23], 2) * d[34];
	coeffs[17] = 2 * d[2] * d[6] * d[10] * d[30] - 2 * d[4] * d[8] * d[10] * d[30] + 2 * d[1] * d[6] * d[11] * d[30] - 2 * d[3] * d[7] * d[11] * d[30] - 2 * d[2] * d[7] * d[12] * d[30] + 2 * d[5] * d[8] * d[12] * d[30] + 2 * d[5] * d[7] * d[13] * d[30] - 2 * d[1] * d[8] * d[13] * d[30] - 4 * d[5] * d[6] * d[14] * d[30] + 2 * d[4] * d[7] * d[14] * d[30] + 2 * d[3] * d[8] * d[14] * d[30] + 2 * d[1] * d[2] * d[15] * d[30] - 2 * std::pow(d[5], 2) * d[15] * d[30] - 2 * d[2] * d[3] * d[16] * d[30] + 2 * d[4] * d[5] * d[16] * d[30] - 2 * d[1] * d[4] * d[17] * d[30] + 2 * d[3] * d[5] * d[17] * d[30] + d[2] * d[10] * std::pow(d[30], 2) + d[1] * d[11] * std::pow(d[30], 2) - 2 * d[5] * d[14] * std::pow(d[30], 2) + 2 * d[2] * d[7] * d[9] * d[31] - 2 * d[5] * d[8] * d[9] * d[31] - 2 * d[3] * d[6] * d[11] * d[31] + 2 * d[0] * d[7] * d[11] * d[31] - 2 * d[2] * d[6] * d[12] * d[31] + 2 * d[4] * d[8] * d[12] * d[31] + 2 * d[5] * d[6] * d[13] * d[31] - 4 * d[4] * d[7] * d[13] * d[31] + 2 * d[3] * d[8] * d[13] * d[31] + 2 * d[4] * d[6] * d[14] * d[31] - 2 * d[0] * d[8] * d[14] * d[31] - 2 * d[2] * d[3] * d[15] * d[31] + 2 * d[4] * d[5] * d[15] * d[31] + 2 * d[0] * d[2] * d[16] * d[31] - 2 * std::pow(d[4], 2) * d[16] * d[31] + 2 * d[3] * d[4] * d[17] * d[31] - 2 * d[0] * d[5] * d[17] * d[31] - 2 * d[3] * d[11] * d[30] * d[31] - 2 * d[2] * d[12] * d[30] * d[31] + 2 * d[5] * d[13] * d[30] * d[31] + 2 * d[4] * d[14] * d[30] * d[31] + d[2] * d[9] * std::pow(d[31], 2) + d[0] * d[11] * std::pow(d[31], 2) - 2 * d[4] * d[13] * std::pow(d[31], 2) - 2 * d[5] * d[7] * d[9] * d[32] + 2 * d[1] * d[8] * d[9] * d[32] - 2 * d[4] * d[6] * d[10] * d[32] + 2 * d[0] * d[8] * d[10] * d[32] + 2 * d[5] * d[6] * d[12] * d[32] + 2 * d[4] * d[7] * d[12] * d[32] - 4 * d[3] * d[8] * d[12] * d[32] - 2 * d[1] * d[6] * d[13] * d[32] + 2 * d[3] * d[7] * d[13] * d[32] + 2 * d[3] * d[6] * d[14] * d[32] - 2 * d[0] * d[7] * d[14] * d[32] - 2 * d[1] * d[4] * d[15] * d[32] + 2 * d[3] * d[5] * d[15] * d[32] + 2 * d[3] * d[4] * d[16] * d[32] - 2 * d[0] * d[5] * d[16] * d[32] + 2 * d[0] * d[1] * d[17] * d[32] - 2 * std::pow(d[3], 2) * d[17] * d[32] - 2 * d[4] * d[10] * d[30] * d[32] + 2 * d[5] * d[12] * d[30] * d[32] - 2 * d[1] * d[13] * d[30] * d[32] + 2 * d[3] * d[14] * d[30] * d[32] - 2 * d[5] * d[9] * d[31] * d[32] + 2 * d[4] * d[12] * d[31] * d[32] + 2 * d[3] * d[13] * d[31] * d[32] - 2 * d[0] * d[14] * d[31] * d[32] + d[1] * d[9] * std::pow(d[32], 2) + d[0] * d[10] * std::pow(d[32], 2) - 2 * d[3] * d[12] * std::pow(d[32], 2) - d[1] * d[2] * d[9] * d[34] + std::pow(d[5], 2) * d[9] * d[34] - d[0] * d[2] * d[10] * d[34] + std::pow(d[4], 2) * d[10] * d[34] - d[0] * d[1] * d[11] * d[34] + std::pow(d[3], 2) * d[11] * d[34] + 2 * d[2] * d[3] * d[12] * d[34] - 2 * d[4] * d[5] * d[12] * d[34] + 2 * d[1] * d[4] * d[13] * d[34] - 2 * d[3] * d[5] * d[13] * d[34] - 2 * d[3] * d[4] * d[14] * d[34] + 2 * d[0] * d[5] * d[14] * d[34];
	coeffs[18] = 2 * d[2] * d[6] * d[19] * d[30] - 2 * d[4] * d[8] * d[19] * d[30] + 2 * d[1] * d[6] * d[20] * d[30] - 2 * d[3] * d[7] * d[20] * d[30] - 2 * d[2] * d[7] * d[21] * d[30] + 2 * d[5] * d[8] * d[21] * d[30] + 2 * d[5] * d[7] * d[22] * d[30] - 2 * d[1] * d[8] * d[22] * d[30] - 4 * d[5] * d[6] * d[23] * d[30] + 2 * d[4] * d[7] * d[23] * d[30] + 2 * d[3] * d[8] * d[23] * d[30] + 2 * d[1] * d[2] * d[24] * d[30] - 2 * std::pow(d[5], 2) * d[24] * d[30] - 2 * d[2] * d[3] * d[25] * d[30] + 2 * d[4] * d[5] * d[25] * d[30] - 2 * d[1] * d[4] * d[26] * d[30] + 2 * d[3] * d[5] * d[26] * d[30] + d[2] * d[19] * std::pow(d[30], 2) + d[1] * d[20] * std::pow(d[30], 2) - 2 * d[5] * d[23] * std::pow(d[30], 2) + 2 * d[2] * d[7] * d[18] * d[31] - 2 * d[5] * d[8] * d[18] * d[31] - 2 * d[3] * d[6] * d[20] * d[31] + 2 * d[0] * d[7] * d[20] * d[31] - 2 * d[2] * d[6] * d[21] * d[31] + 2 * d[4] * d[8] * d[21] * d[31] + 2 * d[5] * d[6] * d[22] * d[31] - 4 * d[4] * d[7] * d[22] * d[31] + 2 * d[3] * d[8] * d[22] * d[31] + 2 * d[4] * d[6] * d[23] * d[31] - 2 * d[0] * d[8] * d[23] * d[31] - 2 * d[2] * d[3] * d[24] * d[31] + 2 * d[4] * d[5] * d[24] * d[31] + 2 * d[0] * d[2] * d[25] * d[31] - 2 * std::pow(d[4], 2) * d[25] * d[31] + 2 * d[3] * d[4] * d[26] * d[31] - 2 * d[0] * d[5] * d[26] * d[31] - 2 * d[3] * d[20] * d[30] * d[31] - 2 * d[2] * d[21] * d[30] * d[31] + 2 * d[5] * d[22] * d[30] * d[31] + 2 * d[4] * d[23] * d[30] * d[31] + d[2] * d[18] * std::pow(d[31], 2) + d[0] * d[20] * std::pow(d[31], 2) - 2 * d[4] * d[22] * std::pow(d[31], 2) - 2 * d[5] * d[7] * d[18] * d[32] + 2 * d[1] * d[8] * d[18] * d[32] - 2 * d[4] * d[6] * d[19] * d[32] + 2 * d[0] * d[8] * d[19] * d[32] + 2 * d[5] * d[6] * d[21] * d[32] + 2 * d[4] * d[7] * d[21] * d[32] - 4 * d[3] * d[8] * d[21] * d[32] - 2 * d[1] * d[6] * d[22] * d[32] + 2 * d[3] * d[7] * d[22] * d[32] + 2 * d[3] * d[6] * d[23] * d[32] - 2 * d[0] * d[7] * d[23] * d[32] - 2 * d[1] * d[4] * d[24] * d[32] + 2 * d[3] * d[5] * d[24] * d[32] + 2 * d[3] * d[4] * d[25] * d[32] - 2 * d[0] * d[5] * d[25] * d[32] + 2 * d[0] * d[1] * d[26] * d[32] - 2 * std::pow(d[3], 2) * d[26] * d[32] - 2 * d[4] * d[19] * d[30] * d[32] + 2 * d[5] * d[21] * d[30] * d[32] - 2 * d[1] * d[22] * d[30] * d[32] + 2 * d[3] * d[23] * d[30] * d[32] - 2 * d[5] * d[18] * d[31] * d[32] + 2 * d[4] * d[21] * d[31] * d[32] + 2 * d[3] * d[22] * d[31] * d[32] - 2 * d[0] * d[23] * d[31] * d[32] + d[1] * d[18] * std::pow(d[32], 2) + d[0] * d[19] * std::pow(d[32], 2) - 2 * d[3] * d[21] * std::pow(d[32], 2) - d[1] * d[2] * d[18] * d[34] + std::pow(d[5], 2) * d[18] * d[34] - d[0] * d[2] * d[19] * d[34] + std::pow(d[4], 2) * d[19] * d[34] - d[0] * d[1] * d[20] * d[34] + std::pow(d[3], 2) * d[20] * d[34] + 2 * d[2] * d[3] * d[21] * d[34] - 2 * d[4] * d[5] * d[21] * d[34] + 2 * d[1] * d[4] * d[22] * d[34] - 2 * d[3] * d[5] * d[22] * d[34] - 2 * d[3] * d[4] * d[23] * d[34] + 2 * d[0] * d[5] * d[23] * d[34];
	coeffs[19] = 2 * d[1] * d[2] * d[6] * d[30] - 2 * std::pow(d[5], 2) * d[6] * d[30] - 2 * d[2] * d[3] * d[7] * d[30] + 2 * d[4] * d[5] * d[7] * d[30] - 2 * d[1] * d[4] * d[8] * d[30] + 2 * d[3] * d[5] * d[8] * d[30] + d[1] * d[2] * std::pow(d[30], 2) - std::pow(d[5], 2) * std::pow(d[30], 2) - 2 * d[2] * d[3] * d[6] * d[31] + 2 * d[4] * d[5] * d[6] * d[31] + 2 * d[0] * d[2] * d[7] * d[31] - 2 * std::pow(d[4], 2) * d[7] * d[31] + 2 * d[3] * d[4] * d[8] * d[31] - 2 * d[0] * d[5] * d[8] * d[31] - 2 * d[2] * d[3] * d[30] * d[31] + 2 * d[4] * d[5] * d[30] * d[31] + d[0] * d[2] * std::pow(d[31], 2) - std::pow(d[4], 2) * std::pow(d[31], 2) - 2 * d[1] * d[4] * d[6] * d[32] + 2 * d[3] * d[5] * d[6] * d[32] + 2 * d[3] * d[4] * d[7] * d[32] - 2 * d[0] * d[5] * d[7] * d[32] + 2 * d[0] * d[1] * d[8] * d[32] - 2 * std::pow(d[3], 2) * d[8] * d[32] - 2 * d[1] * d[4] * d[30] * d[32] + 2 * d[3] * d[5] * d[30] * d[32] + 2 * d[3] * d[4] * d[31] * d[32] - 2 * d[0] * d[5] * d[31] * d[32] + d[0] * d[1] * std::pow(d[32], 2) - std::pow(d[3], 2) * std::pow(d[32], 2) - d[0] * d[1] * d[2] * d[34] + d[2] * std::pow(d[3], 2) * d[34] + d[1] * std::pow(d[4], 2) * d[34] - 2 * d[3] * d[4] * d[5] * d[34] + d[0] * std::pow(d[5], 2) * d[34];

	// Setup elimination template
	static const int coeffs0_ind[] = {0, 10, 1, 0, 10, 11, 2, 1, 0, 10, 11, 12, 3, 2, 1, 11, 12, 13, 3, 2, 12, 13, 4, 0, 10, 14, 5, 4, 14, 1, 10, 11, 0, 15, 6, 5, 4, 14, 15, 2, 11, 12, 1, 16, 7, 4, 14, 0, 10, 17, 8, 7, 17, 5, 14, 15, 1, 11, 4, 18, 6, 5, 15, 16, 3, 12, 13, 2, 3, 13};
	static const int coeffs1_ind[] = {9, 19, 9, 19, 7, 17, 9, 7, 17, 4, 14, 19, 9, 19, 8, 17, 18, 5, 15, 7, 8, 7, 17, 18, 6, 15, 16, 2, 12, 5, 19, 8, 18, 9, 9, 19, 18, 6, 16, 8, 8, 18, 16, 3, 13, 6, 6, 16, 13, 3};
	static const int C0_ind[] = {0, 11, 12, 13, 16, 23, 24, 25, 26, 27, 28, 35, 36, 37, 38, 39, 40, 47, 49, 50, 51, 52, 60, 65, 67, 71, 72, 73, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 101, 103, 104, 105, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 130, 134, 135};
	static const int C1_ind[] = {8, 9, 17, 19, 20, 21, 24, 29, 31, 32, 33, 35, 37, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 68, 69, 70, 74, 75, 78, 80, 81, 82, 86, 87, 90, 92, 93, 94, 98, 99, 102, 106};

	Matrix<double, 12, 12> C0;
	C0.setZero();
	Matrix<double, 12, 9> C1;
	C1.setZero();
	for (int i = 0; i < 70; i++)
	{
		C0(C0_ind[i]) = coeffs(coeffs0_ind[i]);
	}
	for (int i = 0; i < 50; i++)
	{
		C1(C1_ind[i]) = coeffs(coeffs1_ind[i]);
	}

	Matrix<double, 12, 9> C12 = C0.partialPivLu().solve(C1);

	// Setup action matrix
	Matrix<double, 12, 9> RR;
	RR << -C12.bottomRows(3), Matrix<double, 9, 9>::Identity(9, 9);

	static const int AM_ind[] = {8, 6, 0, 7, 1, 9, 10, 11, 2};
	Matrix<double, 9, 9> AM;
	for (int i = 0; i < 9; i++)
	{
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 2, 9> sols;
	sols.setZero();

	// Solve eigenvalue problem
	EigenSolver<Matrix<double, 9, 9>> es(AM);
	ArrayXcd D = es.eigenvalues();
	ArrayXXcd V = es.eigenvectors();

	V = (V / V.row(0).array().replicate(9, 1)).eval();

	sols.row(0) = V.row(1).array();
	sols.row(1) = D.transpose().array();

	return sols;
}
// Action =  y
// Quotient ring basis (V) = 1,x,x^2,x*y,x*y^2,y,y^2,y^3,y^4,
// Available monomials (RR*V) = x^2*y,x*y^3,y^5,1,x,x^2,x*y,x*y^2,y,y^2,y^3,y^4,

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_720:nrhs", "One input required.");
	}
	if (nlhs != 1)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_720:nlhs", "One output required.");
	}
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]))
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_720:notDouble", "Input data must be type double.");
	}
	if (mxGetNumberOfElements(prhs[0]) % 35 != 0)
	{
		mexErrMsgIdAndTxt("automatic_generator_cvpr:toa_upgrade_720:incorrectSize", "Input size must be multiple of 35.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 35;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(2, 9 * n_instances, mxCOMPLEX);
	double *zr = mxGetPr(plhs[0]);
	double *zi = mxGetPi(plhs[0]);
	for (int k = 0; k < n_instances; k++)
	{
		const VectorXd data = Map<const VectorXd>(input + k * 35, 35);
		MatrixXcd sols = solver_toa_upgrade_720(data);
		Index offset = k * sols.size();
		for (Index i = 0; i < sols.size(); i++)
		{
			zr[i + offset] = sols(i).real();
			zi[i + offset] = sols(i).imag();
		}
	}
}
